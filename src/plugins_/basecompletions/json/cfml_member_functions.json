{
    "array": {
        "append": ["someArray.append(value [, merge])", ["(${1:value})", "(${1:any value}${2:, ${3:boolean merge})"]],
        "avg": ["someArray.avg()", ["()", "()"]],
        "clear": ["someArray.clear()", ["()", "()"]],
        "contains": ["someArray.contains(value)", ["(${1:value})", "(${1:any value}${2:, ${3:any substringMatch})"]],
        "containsNoCase": ["someArray.containsNoCase(value)", ["(${1:value})", "(${1:any value})"]],
        "delete": ["someArray.delete(value)", ["(${1:value})", "(${1:any value}${2:, ${3:string scope})"]],
        "deleteAt": ["someArray.deleteAt(index)", ["(${1:index})", "(${1:numeric index})"]],
        "deleteNoCase": ["someArray.deleteNoCase(value)", ["(${1:value})", "(${1:any value}${2:, ${3:string scope})"]],
        "each": ["someArray.each(function(item, [index, [array]]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:function callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "every": ["someArray.every(function(item, [index, [array]]) closure, [boolean parallel], [number maxThreads])", ["(${1:closure})", "(${1:function closure}${2:, ${3:boolean parallel}${4:, ${5:boolean maxThreads})"]],
        "filter": ["someArray.filter(function(item [,index, array]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "find": ["someArray.find(value)", ["(${1:value})", "(${1:any value})"]],
        "findAll": ["someArray.findAll(value or callback)", ["()", "(${1:any value or callback})"]],
        "findAllNoCase": ["someArray.findAllNoCase(value or callback)", ["(${1:value or callback})", "(${1:variableName value or callback})"]],
        "findNoCase": ["someArray.findNoCase(value or callback)", ["(${1:value or callback})", "(${1:any value or callback})"]],
        "first": ["array.first()", ["()", "()"]],
        "getMetaData": ["someArray.getMetadata()", ["()", "()"]],
        "indexExists": ["array.indexExists(index)", ["(${1:index})", "(${1:numeric index})"]],
        "insertAt": ["someArray.insertAt(position, value)", ["(${1:position}, ${2:value})", "(${1:numeric position}, ${2:any value})"]],
        "isDefined": ["someArray.isDefined(index)", ["(${1:index})", "(${1:numeric index})"]],
        "isEmpty": ["someArray.isEmpty()", ["()", "()"]],
        "last": ["array.last()", ["()", "()"]],
        "len": ["someArray.len()", ["()", "()"]],
        "map": ["someArray.map(function(item [,index, array]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:any callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "max": ["someArray.max()", ["()", "()"]],
        "median": ["array.median()", ["()", "()"]],
        "merge": ["array1.merge(array2 [, leaveIndex])", ["(${1:array2})", "(${1:array array2}${2:, ${3:boolean leaveIndex})"]],
        "mid": ["array.mid(start [, count])", ["(${1:start})", "(${1:numeric start}${2:, ${3:numeric count})"]],
        "min": ["someArray.min()", ["()", "()"]],
        "pop": ["array.pop()", ["()", "()"]],
        "prepend": ["someArray.prepend(value)", ["(${1:value})", "(${1:any value})"]],
        "push": ["array.push(value)", ["(${1:value})", "(${1:any value})"]],
        "reduce": ["someArray.reduce(function(result, item [,index, array]){} [, initialValue])", ["(${1:callback})", "(${1:any callback}${2:, ${3:any initialValue})"]],
        "reduceRight": ["someArray.reduceRight(function(result, item [,index, [array]]){} [, initialValue])", ["(${1:callback})", "(${1:any callback}${2:, ${3:any initialValue})"]],
        "resize": ["someArray.resize(size)", ["(${1:size})", "(${1:numeric size})"]],
        "reverse": ["array.reverse()", ["()", "()"]],
        "set": ["someArray.set(start, end, value)", ["(${1:start}, ${2:end}, ${3:value})", "(${1:numeric start}, ${2:numeric end}, ${3:any value})"]],
        "setMetaData": ["someArray.setMetadata(metadata)", ["(${1:metadata})", "(${1:struct metadata})"]],
        "shift": ["array.shift()", ["()", "()"]],
        "slice": ["someArray.slice(offset, length)", ["(${1:offset})", "(${1:numeric offset}${2:, ${3:numeric length})"]],
        "some": ["someArray.some(function(item [,index, array]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "sort": ["someArray.sort(sortType [, sortOrder, localeSensitive ])", ["(${1:sortType})", "(${1:string sortType}${2:, ${3:string sortOrder}${4:, ${5:function callback}${6:, ${7:boolean localeSensitive})"]],
        "splice": ["someArray.splice(index[, elementCountForRemoval, replacements])", ["(${1:index})", "(${1:numeric index}${2:, ${3:numeric elementCountForRemoval}${4:, ${5:array replacements})"]],
        "sum": ["someArray.sum()", ["()", "(${1:boolean ignoreEmpty})"]],
        "swap": ["someArray.swap(position1, position2)", ["(${1:position1}, ${2:position2})", "(${1:numeric position1}, ${2:numeric position2})"]],
        "toList": ["someArray.toList([delimiter])", ["()", "(${1:string delimiter})"]],
        "toStruct": ["array.toStruct()", ["()", "()"]],
        "unshift": ["array.unshift(object)", ["(${1:object})", "(${1:any object})"]]
    },
    "date": {
        "add": ["date.add(datepart, number)", ["(${1:number}, ${2:date})", "(${1:numeric number}, ${2:date date})"]],
        "compare": ["date1.compare(date2 [, datePart])", ["(${1:date2})", "(${1:date date2}${2:, ${3:string datePart})"]],
        "convert": ["date.convert(conversionType)", ["(${1:date})", "(${1:date date})"]],
        "createODBCDate": ["date.createODBCDate()", ["()", "()"]],
        "createODBCDateTime": ["date.createODBCDateTime()", ["()", "()"]],
        "createODBCTime": ["date.createODBCTime()", ["()", "()"]],
        "dateFormat": ["date.dateFormat([mask])", ["()", "(${1:string mask})"]],
        "datepart": ["date.datePart(datepart)", ["(${1:date})", "(${1:date date}${2:, ${3:string timezone})"]],
        "dateTimeFormat": ["datetime.dateTimeFormat([mask [, timezone]])", ["()", "(${1:string mask}${2:, ${3:string timezone})"]],
        "day": ["date.day()", ["()", "()"]],
        "dayOfweek": ["date.dayOfWeek()", ["()", "(${1:string calendar})"]],
        "dayOfYear": ["date.dayOfYear()", ["()", "()"]],
        "days": ["date.daysInYear()", ["()", "()"]],
        "daysInMonth": ["date.daysInMonth()", ["()", "()"]],
        "diff": ["date2.diff(datepart, date1)", ["(${1:date1}, ${2:date2})", "(${1:date date1}, ${2:date date2})"]],
        "firstDayOfMonth": ["date.firstDayOfMonth()", ["()", "()"]],
        "hour": ["date.hour()", ["()", "()"]],
        "lsDateFormat": ["date.lsDateFormat([mask, locale])", ["()", "(${1:string mask}${2:, ${3:string locale})"]],
        "lsTimeFormat": ["time.lsTimeFormat([mask])", ["()", "(${1:string mask}${2:, ${3:string locale})"]],
        "minute": ["date.minute()", ["()", "()"]],
        "month": ["date.month()", ["()", "()"]],
        "quarter": ["date.quarter()", ["()", "()"]],
        "second": ["date.second()", ["()", "()"]],
        "timeFormat": ["time.timeFormat([mask])", ["()", "(${1:string mask})"]],
        "week": ["date.week()", ["()", "(${1:string calendar})"]],
        "year": ["date.year()", ["()", "()"]]
    },
    "display": {
        "booleanFormat": ["display.booleanFormat()", ["()", "()"]],
        "yesNoFormat": ["display.yesNoFormat()", ["()", "()"]]
    },
    "image": {
        "addBorder": ["someImage.addBorder(thickness [, color] [, bordertype])", ["(${1:thickness})", "(${1:string thickness}${2:, ${3:string color}${4:, ${5:string bordertype})"]],
        "blur": ["someImage.blur(blurradius)", ["()", "(${1:numeric blurradius})"]],
        "clearRect": ["someImage.clearRect(x, y, width, height)", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height})"]],
        "copy": ["someImage.copy(x, y, width, height [, dx] [, dy])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}${5:, ${6:numeric dx}${7:, ${8:numeric dy})"]],
        "crop": ["someImage.crop(x, y, width, height)", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height})"]],
        "drawArc": ["someImage.drawArc(x, y, width, height, startAngle, archAngle [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:startAngle}, ${6:archAngle})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}, ${5:numeric startAngle}, ${6:numeric archAngle}${7:, ${8:boolean filled})"]],
        "drawBeveledRect": ["someImage.drawBeveledRect(x, y, width, height, raised [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:raised})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}, ${5:boolean raised}${6:, ${7:boolean filled})"]],
        "drawCubicCurve": ["someImage.drawCubicCurve(ctrlx1, ctrly1, ctrlx2, ctrly2, x1, y1, x2, y2)", ["(${1:ctrlx1}, ${2:ctrly1}, ${3:ctrlx2}, ${4:ctrly2}, ${5:x1}, ${6:y1}, ${7:x2}, ${8:y2})", "(${1:string ctrlx1}, ${2:numeric ctrly1}, ${3:numeric ctrlx2}, ${4:numeric ctrly2}, ${5:numeric x1}, ${6:numeric y1}, ${7:numeric x2}, ${8:numeric y2})"]],
        "drawLine": ["someImage.drawLine(x1, y1, x2, y2)", ["(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})", "(${1:numeric x1}, ${2:numeric y1}, ${3:numeric x2}, ${4:numeric y2})"]],
        "drawLines": ["someImage.drawLines(xcords, ycords [, isPolygon] [, filled])", ["(${1:xcords}, ${2:ycords})", "(${1:numeric xcords}, ${2:numeric ycords}${3:, ${4:boolean isPolygon}${5:, ${6:boolean filled})"]],
        "drawOval": ["someImage.drawOval(x, y, width, height [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}${5:, ${6:boolean filled})"]],
        "drawPoint": ["someImage.drawPoint(x, y)", ["(${1:x}, ${2:y})", "(${1:numeric x}, ${2:numeric y})"]],
        "drawQuadraticCurve": ["someImage.drawQuadraticCurve(ctrlx1, ctrly1, x1, y1, x2, y2)", ["(${1:x1}, ${2:y1}, ${3:ctrlx1}, ${4:ctrly1}, ${5:x2}, ${6:y2})", "(${1:numeric x1}, ${2:numeric y1}, ${3:string ctrlx1}, ${4:numeric ctrly1}, ${5:numeric x2}, ${6:numeric y2})"]],
        "drawRect": ["someImage.drawRect(x, y, width, height [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}${5:, ${6:boolean filled})"]],
        "drawRoundRect": ["someImage.drawRoundRect(x, y, width, height, arcwidth, archeight [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:arcwidth}, ${6:archeight})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}, ${5:numeric arcwidth}, ${6:numeric archeight}${7:, ${8:boolean filled})"]],
        "drawText": ["someImage.drawText(str, x, y, attributecollection)", ["(${1:str}, ${2:x}, ${3:y})", "(${1:string str}, ${2:numeric x}, ${3:numeric y}${4:, ${5:struct attributecollection})"]],
        "flip": ["someImage.flip(transpose)", ["(${1:transpose})", "(${1:string transpose})"]],
        "getBlob": ["someImage.getBlob()", ["()", "()"]],
        "getBufferedImage": ["someImage.getBufferedImage()", ["()", "()"]],
        "getExifMetadata": ["someImage.getEXIFMetadata()", ["()", "()"]],
        "getEXIFTag": ["someImage.getEXIFTag(tagName)", ["(${1:tagName})", "(${1:string tagName})"]],
        "getHeight": ["someImage.getHeight()", ["()", "()"]],
        "getIptcMetadata": ["someImage.getIPTCMetadata()", ["()", "()"]],
        "getIPTCTag": ["someImage.getIPTCtag(tagName)", ["(${1:tagName})", "(${1:string tagName})"]],
        "getMetadata": ["someImage.getMetadata()", ["()", "()"]],
        "getWidth": ["someImage.getWidth()", ["()", "()"]],
        "grayscale": ["someImage.grayScale()", ["()", "()"]],
        "info": ["someImage.info()", ["()", "()"]],
        "negative": ["someImage.negative()", ["()", "()"]],
        "overlay": ["someImage.overlay(source2 [, rule, alpha])", ["(${1:source2})", "(${1:string source2}${2:, ${3:string rule}${4:, ${5:string alpha})"]],
        "paste": ["someImage.paste(image2, x, y)", ["(${1:image2}, ${2:x}, ${3:y})", "(${1:string image2}, ${2:numeric x}, ${3:numeric y})"]],
        "resize": ["someImage.resize(width, height, interpolation, blurfactor)", ["(${1:width}, ${2:height})", "(${1:numeric width}, ${2:numeric height}${3:, ${4:string interpolation}${5:, ${6:boolean blurfactor})"]],
        "rotate": ["someImage.rotate([, x] [, y] , angle [, interpolation])", ["(${1:angle})", "(${1:numeric angle}${2:, ${3:numeric x}${4:, ${5:numeric y}${6:, ${7:string interpolation})"]],
        "rotateDrawingAxis": ["someImage.rotateDrawingAxis(angle [, x] [, y])", ["(${1:angle})", "(${1:numeric angle}${2:, ${3:numeric x}${4:, ${5:numeric y})"]],
        "scaleToFit": ["someImage.scaleTofit(fitWidth, fitHeight [, interpolation] [, blurFactor])", ["(${1:fitWidth}, ${2:fitHeight})", "(${1:numeric fitWidth}, ${2:numeric fitHeight}${3:, ${4:string interpolation}${5:, ${6:boolean blurfactor})"]],
        "setAntialiasing": ["someImage.setAntialiasing(antialias)", ["()", "(${1:string antialias})"]],
        "setBackgroundColor": ["someImage.setBackgroundColor(color)", ["(${1:color})", "(${1:string color})"]],
        "setDrawingColor": ["someImage.setDrawingColor(color)", ["(${1:color})", "(${1:string color})"]],
        "setDrawingStroke": ["someImage.setDrawingStroke(attributecollection)", ["()", "(${1:struct attributecollection})"]],
        "setDrawingTransparency": ["someImage.setDrawingTransparency(percent)", ["(${1:percent})", "(${1:numeric percent})"]],
        "sharpen": ["someImage.sharpen(gain)", ["()", "(${1:numeric gain})"]],
        "shear": ["someImage.shear(shear [, direction] [, interpolation])", ["(${1:shear})", "(${1:numeric shear}${2:, ${3:string direction}${4:, ${5:string interpolation})"]],
        "shearDrawingAxis": ["someImage.shearDrawingAxis(shrx, shry)", ["(${1:shrx}, ${2:shry})", "(${1:numeric shrx}, ${2:numeric shry})"]],
        "translate": ["someImage.translate(xTrans, yTrans [, interpolation])", ["(${1:xTrans}, ${2:yTrans})", "(${1:numeric xTrans}, ${2:numeric yTrans}${3:, ${4:string interpolation})"]],
        "translateDrawingAxis": ["someImage.translateDrawingAxis(x, y)", ["(${1:x}, ${2:y})", "(${1:numeric x}, ${2:numeric y})"]],
        "write": ["someImage.write([destination] [, quality] [, overwrite])", ["()", "(${1:string destination}${2:, ${3:string quality}${4:, ${5:boolean overwrite})"]],
        "writeBase64": ["someImage.writeBase64(destination, format [, inHTMLFormat] [, overwrite])", ["(${1:destination}, ${2:format})", "(${1:string destination}, ${2:string format}${3:, ${4:boolean inHTMLFormat}${5:, ${6:boolean overwrite})"]],
        "xorDrawingMode": ["someImage.xorDrawingMode(color)", ["(${1:color})", "(${1:string color})"]]
    },
    "list": {
        "listAppend": ["str.listAppend(value [, delimiters, includeEmptyFields])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}${4:, ${5:boolean includeEmptyFields})"]],
        "listAvg": ["list.listAvg([delimiters] [, multiCharacterDelimiter])", ["()", "(${1:string delimiters}${2:, ${3:boolean multiCharacterDelimiter})"]],
        "listChangeDelims": ["list.listChangeDelims(new_delimiter [, delimiters, [includeEmptyValues]])", ["(${1:new_delimiter})", "(${1:string new_delimiter}${2:, ${3:string delimiters}${4:, ${5:string includeEmptyValues})"]],
        "listContains": ["list.listContains()", ["(${1:substring})", "(${1:string substring}${2:, ${3:string delimiters})"]],
        "listContainsNoCase": ["list.listContainsNoCase()", ["(${1:substring})", "(${1:string substring}${2:, ${3:string delimiters})"]],
        "listDeleteAt": ["list.listDeleteAt()", ["(${1:position})", "(${1:numeric position}${2:, ${3:string delimiters})"]],
        "listEach": ["list.listEach()", ["(${1:function}, ${2:delim})", "(${1:function function}, ${2:string delim}${3:, ${4:boolean includeEmptyFields})"]],
        "listEvery": ["list.listEvery(closure [, delimiter] [, includeEmptyFields] [, multiCharacterDelimiter] [, parallel] [, maxThreads])", ["(${1:closure})", "(${1:function closure}${2:, ${3:string delimiter}${4:, ${5:boolean includeEmptyFields}${6:, ${7:boolean multiCharacterDelimiter}${8:, ${9:boolean parallel}${10:, ${11:numeric maxThreads})"]],
        "listFilter": ["someList.listFilter(function(listElement, [list]) )", ["(${1:function})", "(${1:function function})"]],
        "listFind": ["list.listFind(value [, delimiters, includeEmptyValues])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}${4:, ${5:string includeEmptyValues})"]],
        "listFindNoCase": ["list.listFindNoCase(value [, delimiters, includeEmptyValues])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}${4:, ${5:string includeEmptyValues})"]],
        "listFirst": ["list.listFirst()", ["()", "(${1:string delimiters})"]],
        "listGetAt": ["list.listGetAt()", ["(${1:position})", "(${1:numeric position}${2:, ${3:string delimiter}${4:, ${5:boolean includeEmptyValues})"]],
        "listIndexExists": ["list.listIndexExists(index [, delimiter] [, includeEmptyFields])", ["(${1:index})", "(${1:numeric index}${2:, ${3:string delimiter}${4:, ${5:boolean includeEmptyFields})"]],
        "listInsertAt": ["list.listInsertAt()", ["(${1:position}, ${2:value})", "(${1:numeric position}, ${2:string value}${3:, ${4:string delimiters})"]],
        "listItemTrim": ["list.listItemTrim([delimiters] [, includeEmptyFields])", ["()", "(${1:string delimiters}${2:, ${3:boolean includeEmptyFields})"]],
        "listLast": ["list.listLast()", ["()", "(${1:string delimiters}${2:, ${3:boolean includeEmptyValues})"]],
        "listLen": ["list.listLen()", ["()", "(${1:string delimiters}${2:, ${3:string includeEmptyValues})"]],
        "listMap": ["list.listMap()", ["(${1:function})", "(${1:any function}${2:, ${3:any intialValue}${4:, ${5:string delimiter}${6:, ${7:boolean includeEmptyFields})"]],
        "listPrepend": ["someList.listPrepend( value [, delimiters, includeEmptyFields])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}${4:, ${5:boolean includeEmptyFields})"]],
        "listQualify": ["list.listQualify()", ["(${1:qualifier})", "(${1:string qualifier}${2:, ${3:string delimiters}${4:, ${5:string elements}${6:, ${7:boolean includeEmptyFields})"]],
        "listReduce": ["list.listReduce()", ["(${1:function})", "(${1:any function}${2:, ${3:any intialValue}${4:, ${5:string delimiter}${6:, ${7:boolean includeEmptyFields})"]],
        "listReduceRight": ["list.listReduceRight(callback, initialValue[, delimiter][, includeEmptyFields])", ["(${1:callback}, ${2:initialValue})", "(${1:any callback}, ${2:any initialValue}${3:, ${4:string delimiter}${5:, ${6:boolean includeEmptyFields})"]],
        "listRemoveDuplicates": ["list.listRemoveDuplicates()", ["()", "(${1:string delimiter}${2:, ${3:boolean ignoreCase})"]],
        "listRest": ["list.listRest()", ["()", "(${1:string delimiters})"]],
        "listSetAt": ["list.listSetAt()", ["(${1:position}, ${2:value})", "(${1:numeric position}, ${2:string value}${3:, ${4:string delimiters})"]],
        "listSome": ["list.listSome(closure [, delimiter] [, includeEmptyFields] [, multiCharacterDelimiter] [, parallel] [, maxThreads])", ["(${1:closure})", "(${1:function closure}${2:, ${3:string delimiter}${4:, ${5:boolean includeEmptyFields}${6:, ${7:boolean multiCharacterDelimiter}${8:, ${9:boolean parallel}${10:, ${11:numeric maxThreads})"]],
        "listSort": ["list.listSort(sortType [, sortOrder])", ["(${1:sortType})", "(${1:string sortType}${2:, ${3:string sortOrder}${4:, ${5:string delimiters}${6:, ${7:boolean includeEmptyFields}${8:, ${9:function callback}${10:, ${11:boolean localeSensitive})"]],
        "listToArray": ["str.listToArray([delimiters] [, includeEmptyFields] [, multiCharacterDelimiter])", ["()", "(${1:string delimiters}${2:, ${3:boolean includeEmptyFields}${4:, ${5:boolean multiCharacterDelimiter})"]],
        "listValueCount": ["list.listValueCount()", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters})"]],
        "listValueCountNoCase": ["list.listValueCountNoCase()", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters})"]]
    },
    "numeric": {
        "abs": ["numeric.abs()", ["()", "()"]],
        "aCos": ["numeric.aCos()", ["()", "()"]],
        "aSin": ["numeric.aSin()", ["()", "()"]],
        "atn": ["numeric.atn()", ["()", "()"]],
        "bitAnd": ["numeric.bitAnd()", ["(${1:number2})", "(${1:numeric number2})"]],
        "bitMaskClear": ["numeric.bitMaskClear()", ["(${1:start}, ${2:length})", "(${1:numeric start}, ${2:numeric length})"]],
        "bitMaskRead": ["numeric.bitMaskRead()", ["(${1:start}, ${2:length})", "(${1:numeric start}, ${2:numeric length})"]],
        "bitMaskSet": ["numeric.bitMaskSet()", ["(${1:mask}, ${2:start}, ${3:length})", "(${1:numeric mask}, ${2:numeric start}, ${3:numeric length})"]],
        "bitNot": ["numeric.bitNot()", ["()", "()"]],
        "bitOr": ["numeric.bitOr()", ["(${1:number2})", "(${1:numeric number2})"]],
        "bitSHLN": ["numeric.bitSHLN()", ["(${1:count})", "(${1:numeric count})"]],
        "bitSHRN": ["numeric.bitSHRN()", ["(${1:count})", "(${1:numeric count})"]],
        "bitXor": ["numeric.bitXor()", ["(${1:number2})", "(${1:numeric number2})"]],
        "ceiling": ["numeric.ceiling()", ["()", "()"]],
        "cos": ["numeric.cos()", ["()", "()"]],
        "decrementValue": ["numeric.decrementValue()", ["()", "()"]],
        "exp": ["numeric.exp()", ["()", "()"]],
        "fix": ["numeric.fix()", ["()", "()"]],
        "floor": ["numeric.floor()", ["()", "()"]],
        "incrementValue": ["numeric.incrementValue()", ["()", "()"]],
        "inputBaseN": ["numeric.inputBaseN()", ["(${1:radix})", "(${1:string radix})"]],
        "log": ["numeric.log()", ["()", "()"]],
        "log10": ["numeric.log10()", ["()", "()"]],
        "max": ["numeric.max()", ["(${1:number2})", "(${1:numeric number2})"]],
        "min": ["numeric.min()", ["(${1:number2})", "(${1:numeric number2})"]],
        "precisionEvaluate": ["numeric.precisionEvaluate()", ["()", "()"]],
        "randomize": ["numeric.randomize()", ["()", "(${1:string algorithm})"]],
        "randRange": ["numeric.randRange()", ["(${1:number2})", "(${1:numeric number2}${2:, ${3:string algorithm})"]],
        "round": ["numeric.round()", ["()", "()"]],
        "sgn": ["numeric.sgn()", ["()", "()"]],
        "sin": ["numeric.sin()", ["()", "()"]],
        "sqr": ["numeric.sqr()", ["()", "()"]],
        "tan": ["numeric.tan()", ["()", "()"]]
    },
    "query": {
        "addColumn": ["someQuery.addColumn(column_name [, datatype], array_name)", ["(${1:column_name}, ${2:array_name})", "(${1:string column_name}${2:, ${3:string datatype}, ${4:array array_name})"]],
        "addRow": ["someQuery.addRow([number/row(s)])", ["()", "(${1:numeric number/row(s)})"]],
        "append": ["qry.append(query2)", ["(${1:query2})", "(${1:query query2})"]],
        "clear": ["query.clear()", ["()", "()"]],
        "columnArray": ["query.columnArray()", ["()", "()"]],
        "columnCount": ["query.columnCount()", ["()", "()"]],
        "columnData": ["query.columnData(columnName [, closure])", ["(${1:columnName})", "(${1:string columnName}${2:, ${3:function closure})"]],
        "columnExists": ["query.columnExists(column)", ["(${1:column})", "(${1:string column})"]],
        "columnList": ["query.columnList([delimiter])", ["()", "(${1:string delimiter})"]],
        "convertForGrid": ["query.convertForGrid()", ["(${1:page}, ${2:pageSize})", "(${1:numeric page}, ${2:numeric pageSize})"]],
        "deleteColumn": ["query.deleteColumn(column)", ["(${1:column})", "(${1:string column})"]],
        "deleteRow": ["query.deleteRow([row])", ["()", "(${1:numeric row})"]],
        "each": ["query.each(function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:any callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "every": ["query.every(closure [, parallel] [, maxThreads])", ["(${1:closure})", "(${1:function closure}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "filter": ["query.filter(function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "getCell": ["query.getCell(column_name [, row_number])", ["(${1:column_name})", "(${1:string column_name}${2:, ${3:numeric row_number})"]],
        "getResult": ["query.getResult()", ["()", "()"]],
        "getRow": ["someQuery.getRow(rowNumber)", ["(${1:rowNumber})", "(${1:numeric rowNumber})"]],
        "insertAt": ["query.InsertAt(value,position)", ["(${1:value}, ${2:position})", "(${1:query value}, ${2:numeric position})"]],
        "keyExists": ["query.keyExists(key)", ["(${1:key})", "(${1:string key})"]],
        "map": ["query.map(function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "prepend": ["qry.prepend(query2)", ["(${1:query2})", "(${1:query query2})"]],
        "recordCount": ["query.recordCount()", ["()", "()"]],
        "reduce": ["query.reduce()", ["(${1:callback})", "(${1:any callback}${2:, ${3:any initialValue})"]],
        "reverse": ["query.reverse()", ["()", "()"]],
        "rowData": ["query.rowData(rowNumber)", ["(${1:rowNumber})", "(${1:numeric rowNumber})"]],
        "rowswap": ["query.rowSwap(sourceRow, destinationRow)", ["(${1:sourceRow}, ${2:destinationRow})", "(${1:numeric sourceRow}, ${2:numeric destinationRow})"]],
        "setCell": ["query.setCell()", ["(${1:column}, ${2:value})", "(${1:string column}, ${2:any value}${3:, ${4:numeric row})"]],
        "setRow": ["someQuery.setRow([rowNumber,] rowData)", ["(${1:rowData})", "(${1:numeric rowNumber}, ${2:any rowData})"]],
        "slice": ["query.slice(offset [, length])", ["(${1:offset})", "(${1:numeric offset}${2:, ${3:numeric length})"]],
        "some": ["query.some(function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "sort": ["query.sort(sortFunction)", ["(${1:sortFunction})", "(${1:function sortFunction}${2:, ${3:string direction})"]],
        "valueArray": ["query.valueArray()", ["(${1:column})", "(${1:string column})"]]
    },
    "spreadsheet": {
        "addAutoFilter": ["spreadsheet.addAutoFilter()", ["(${1:autofilter})", "(${1:string autofilter})"]],
        "addColumn": ["spreadsheet.addColumn()", ["(${1:data}, ${2:startrow}, ${3:startcolumn}, ${4:insert})", "(${1:string data}, ${2:numeric startrow}, ${3:numeric startcolumn}, ${4:boolean insert}${5:, ${6:boolean insert})"]],
        "addFreezePane": ["spreadsheet.addFreezePane()", ["(${1:freezeColumn}, ${2:freezeRow})", "(${1:numeric freezeColumn}, ${2:numeric freezeRow}${3:, ${4:numeric hideColumn}${5:, ${6:numeric hideRow})"]],
        "addImage": ["spreadsheet.addImage()", ["(${1:imagefilepath}, ${2:anchor})", "(${1:string imagefilepath}, ${2:string anchor})"]],
        "addInfo": ["spreadsheet.addInfo()", ["(${1:info})", "(${1:struct info})"]],
        "addPageBreaks": ["spreadsheet.addPageBreaks()", ["(${1:rowbreaks}, ${2:colbreaks})", "(${1:string rowbreaks}, ${2:string colbreaks})"]],
        "addRow": ["spreadsheet.addRow()", ["(${1:data})", "(${1:string data}${2:, ${3:numeric row}${4:, ${5:numeric column}${6:, ${7:boolean insert}${8:, ${9:array datatype})"]],
        "addRows": ["spreadsheet.addRows()", ["(${1:data})", "(${1:any data}${2:, ${3:numeric row}${4:, ${5:numeric column}${6:, ${7:boolean insert}${8:, ${9:array datatype}${10:, ${11:boolean includeColumnNames})"]],
        "addSplitPane": ["spreadsheet.addSplitPane()", ["(${1:x}, ${2:y}, ${3:splitColumn}, ${4:splitRow})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric splitColumn}, ${4:numeric splitRow}${5:, ${6:string position})"]],
        "createSheet": ["spreadsheet.createSheet()", ["(${1:name})", "(${1:string name})"]],
        "deleteColumn": ["spreadsheet.deleteColumn()", ["(${1:column})", "(${1:numeric column})"]],
        "deleteColumns": ["spreadsheet.deleteColumns()", ["(${1:range})", "(${1:numeric range})"]],
        "deleteRow": ["spreadsheet.deleteRow()", ["(${1:row})", "(${1:numeric row})"]],
        "deleteRows": ["spreadsheet.deleteRows()", ["(${1:range})", "(${1:numeric range})"]],
        "formatCell": ["spreadsheet.formatCell()", ["(${1:format}, ${2:row}, ${3:column})", "(${1:struct format}, ${2:numeric row}, ${3:numeric column})"]],
        "formatCellRange": ["spreadsheet.formatCellRange()", ["(${1:format}, ${2:startRow}, ${3:startColumn}, ${4:endRow}, ${5:endColumn})", "(${1:struct format}, ${2:numeric startRow}, ${3:numeric startColumn}, ${4:numeric endRow}, ${5:numeric endColumn})"]],
        "formatColumn": ["spreadsheet.formatColumn()", ["(${1:format}, ${2:column})", "(${1:struct format}, ${2:numeric column})"]],
        "formatColumns": ["spreadsheet.formatColumns()", ["(${1:format}, ${2:columns})", "(${1:string format}, ${2:string columns})"]],
        "formatRow": ["spreadsheet.formatRow()", ["(${1:format}, ${2:row})", "(${1:struct format}, ${2:numeric row})"]],
        "formatRows": ["spreadsheet.formatRows()", ["(${1:format}, ${2:rows})", "(${1:struct format}, ${2:string rows})"]],
        "getCellComment": ["spreadsheet.getCellComment()", ["()", "(${1:numeric column}${2:, ${3:string comment}${4:, ${5:string row})"]],
        "getCellFormula": ["spreadsheet.getCellFormula()", ["(${1:row}, ${2:column})", "(${1:numeric row}, ${2:numeric column})"]],
        "getCellValue": ["spreadsheet.getCellValue()", ["(${1:row}, ${2:column})", "(${1:string row}, ${2:string column})"]],
        "getColumnCount": ["spreadsheet.getColumnCount()", ["()", "(${1:string sheet})"]],
        "info": ["spreadsheet.info()", ["()", "()"]],
        "mergeCells": ["spreadsheet.mergeCells()", ["(${1:startrow}, ${2:endrow}, ${3:startcolumn}, ${4:endcolumn})", "(${1:numeric startrow}, ${2:numeric endrow}, ${3:numeric startcolumn}, ${4:numeric endcolumn})"]],
        "readBinary": ["spreadsheet.readBinary()", ["()", "()"]],
        "removeSheet": ["spreadsheet.removeSheet()", ["(${1:sheetname})", "(${1:string sheetname})"]],
        "setActiveSheet": ["spreadsheet.setActiveSheet()", ["()", "(${1:string name})"]],
        "setActiveSheetNumber": ["spreadsheet.setActiveSheetNumber()", ["()", "(${1:numeric number})"]],
        "setCellComment": ["spreadsheet.setCellComment()", ["(${1:comment}, ${2:row}, ${3:column})", "(${1:string comment}, ${2:numeric row}, ${3:numeric column})"]],
        "setCellFormula": ["spreadsheet.setCellFormula()", ["(${1:formula}, ${2:row}, ${3:column})", "(${1:string formula}, ${2:numeric row}, ${3:numeric column})"]],
        "setCellValue": ["spreadsheet.setCellValue()", ["(${1:value}, ${2:row}, ${3:column})", "(${1:string value}, ${2:numeric row}, ${3:numeric column})"]],
        "setColumnWidth": ["spreadsheet.setColumnWidth()", ["(${1:columnNumber}, ${2:width})", "(${1:numeric columnNumber}, ${2:numeric width})"]],
        "setFooter": ["spreadsheet.setFooter()", ["(${1:leftFooter}, ${2:centerFooter}, ${3:rightFooter})", "(${1:string leftFooter}, ${2:string centerFooter}, ${3:string rightFooter})"]],
        "setHeader": ["spreadsheet.setHeader()", ["(${1:leftHeader}, ${2:centerHeader}, ${3:rightHeader})", "(${1:string leftHeader}, ${2:string centerHeader}, ${3:string rightHeader})"]],
        "setRowHeight": ["spreadsheet.setRowHeight()", ["(${1:rowNumber}, ${2:height})", "(${1:numeric rowNumber}, ${2:numeric height})"]],
        "shiftColumns": ["spreadsheet.shiftColumns()", ["(${1:start})", "(${1:numeric start}${2:, ${3:numeric end}${4:, ${5:numeric start})"]],
        "shiftRows": ["spreadsheet.shiftRows()", ["(${1:start}, ${2:end})", "(${1:numeric start}, ${2:numeric end}${3:, ${4:numeric rows})"]],
        "write": ["spreadsheet.write()", ["(${1:fileName})", "(${1:string fileName}${2:, ${3:string password}${4:, ${5:boolean overwrite})"]]
    },
    "string": {
        "binaryDecode": ["string.binaryDecode()", ["(${1:encoding})", "(${1:string encoding})"]],
        "binaryEnecode": ["string.binaryEnecode()", ["(${1:encoding})", "(${1:string encoding})"]],
        "canonicalize": ["string.canonicalize()", ["(${1:restrictMultiple}, ${2:restrictMixed})", "(${1:boolean restrictMultiple}, ${2:boolean restrictMixed}${3:, ${4:boolean throwOnError})"]],
        "charsetDecode": ["string.charsetDecode()", ["(${1:encoding})", "(${1:string encoding})"]],
        "charsetEncode": ["string.charsetEncode()", ["(${1:encoding})", "(${1:string encoding})"]],
        "cJustify": ["string.cJustify()", ["(${1:length})", "(${1:numeric length})"]],
        "compare": ["string.compare()", ["(${1:string2})", "(${1:string string2})"]],
        "compareNocase": ["string.compareNocase()", ["(${1:string2})", "(${1:string string2})"]],
        "decodeForHTML": ["string.decodeForHTML()", ["()", "()"]],
        "decodeFromURL": ["string.decodeFromURL()", ["()", "()"]],
        "decrypt": ["string.decrypt()", ["(${1:key})", "(${1:string key}${2:, ${3:string algorithm}${4:, ${5:string encoding}${6:, ${7:binary iv}${8:, ${9:binary salt}${10:, ${11:numeric iterations})"]],
        "each": ["string.each(callback)", ["(${1:callback})", "(${1:any callback})"]],
        "encodeforCSS": ["string.encodeforCSS()", ["()", "(${1:boolean canonicalize})"]],
        "encodeforHTML": ["string.encodeforHTML()", ["()", "(${1:boolean canonicalize})"]],
        "encodeforHTMLAttribute": ["string.encodeforHTMLAttribute()", ["()", "(${1:boolean canonicalize})"]],
        "encodeforJavaScript": ["string.encodeforJavaScript()", ["()", "(${1:boolean canonicalize}${2:, ${3:boolean canonicalize})"]],
        "encodeforURL": ["string.encodeforURL()", ["()", "(${1:boolean canonicalize})"]],
        "encodeforXML": ["string.encodeforXML()", ["()", "(${1:boolean canonicalize})"]],
        "encodeforXMLAttribute": ["string.encodeforXMLAttribute()", ["()", "(${1:boolean canonicalize})"]],
        "encodeforXPath": ["string.encodeforXPath()", ["()", "(${1:boolean canonicalize})"]],
        "encrypt": ["string.encrypt()", ["(${1:key})", "(${1:string key}${2:, ${3:string algorithm}${4:, ${5:string encoding}${6:, ${7:binary iv}${8:, ${9:binary salt}${10:, ${11:numeric iterations})"]],
        "every": ["string.every(callback)", ["(${1:callback})", "(${1:any callback})"]],
        "filter": ["string.filter(callback)", ["(${1:callback})", "(${1:any callback})"]],
        "find": ["string.find()", ["(${1:string})", "(${1:string string}${2:, ${3:numeric start})"]],
        "findNoCase": ["string.findNoCase()", ["(${1:string})", "(${1:string string}${2:, ${3:numeric start})"]],
        "findOneOf": ["string.findOneOf()", ["(${1:string})", "(${1:string string}${2:, ${3:numeric start})"]],
        "formatBaseN": ["string.formatBaseN()", ["(${1:radix})", "(${1:numeric radix})"]],
        "generateSecretKey": ["string.generateSecretKey()", ["()", "(${1:numeric keysize})"]],
        "getSafeHTML": ["string.getSafeHTML()", ["()", "(${1:string PolicyFile}${2:, ${3:boolean throwOnError})"]],
        "getToken": ["string.getToken()", ["(${1:index})", "(${1:numeric index}${2:, ${3:string delimiters})"]],
        "hash": ["string.hash()", ["()", "(${1:string algorithm}${2:, ${3:string encoding}${4:, ${5:numeric additionalIterations})"]],
        "htmlCodeFormat": ["string.htmlCodeFormat()", ["()", "(${1:numeric version})"]],
        "htmlEditFormat": ["string.htmlEditFormat()", ["()", "(${1:numeric version})"]],
        "insert": ["string.insert()", ["(${1:String}, ${2:position})", "(${1:string String}, ${2:numeric position})"]],
        "isSafeHTML": ["string.isSafeHTML()", ["()", "(${1:string PolicyFile})"]],
        "jssStringFormat": ["string.jssStringFormat()", ["()", "()"]],
        "lCase": ["string.lCase()", ["()", "()"]],
        "left": ["string.left(count)", ["(${1:count})", "(${1:numeric count})"]],
        "len": ["string.len()", ["()", "()"]],
        "lJustify": ["string.lJustify()", ["(${1:length})", "(${1:numeric length})"]],
        "lsIsCurrency": ["string.lsIsCurrency()", ["()", "()"]],
        "lsIsDate": ["string.lsIsDate()", ["()", "()"]],
        "lsIsNumeric": ["string.lsIsNumeric()", ["()", "()"]],
        "lsParseCurrency": ["string.lsParseCurrency()", ["()", "()"]],
        "lsParseDateTime": ["string.lsParseDateTime()", ["()", "()"]],
        "lsParseEuroCurrency": ["string.lsParseEuroCurrency()", ["()", "()"]],
        "lsParseNumber": ["string.lsParseNumber()", ["()", "(${1:string locale})"]],
        "map": ["string.map(callback)", ["()", "(${1:any callback})"]],
        "mid": ["string.mid()", ["(${1:start}, ${2:count})", "(${1:numeric start}, ${2:numeric count})"]],
        "paragraphFormat": ["string.paragraphFormat()", ["()", "()"]],
        "parseDateTime": ["string.parseDateTime()", ["()", "(${1:string pop_conversion})"]],
        "reduce": ["string.reduce(callback, initialValue)", ["(${1:callback})", "(${1:any callback}${2:, ${3:any initialVal})"]],
        "reduceRight": ["string.reduceRight(callback, initialValue)", ["(${1:callback}, ${2:initialValue})", "(${1:any callback}, ${2:any initialValue})"]],
        "reFind": ["string.reFind()", ["(${1:string})", "(${1:string string}${2:, ${3:numeric start}${4:, ${5:boolean returnsubexpressions}${6:, ${7:string scope})"]],
        "reFindNoCase": ["string.reFindNoCase()", ["(${1:string})", "(${1:string string}${2:, ${3:numeric start}${4:, ${5:boolean returnsubexpressions}${6:, ${7:string scope})"]],
        "reMatch": ["string.reMatch()", ["(${1:string})", "(${1:string string})"]],
        "reMatchNoCase": ["string.reMatchNoCase()", ["(${1:string})", "(${1:string string})"]],
        "removeChars": ["string.removeChars()", ["(${1:start}, ${2:count})", "(${1:numeric start}, ${2:numeric count})"]],
        "repeatString": ["string.repeatString()", ["(${1:count})", "(${1:numeric count})"]],
        "replace": ["string.replace(substring1, obj[, scope])", ["(${1:substring1}, ${2:obj})", "(${1:string substring1}, ${2:any obj}${3:, ${4:string scope}${5:, ${6:numeric start})"]],
        "replaceList": ["string.replaceList()", ["(${1:list1}, ${2:list2})", "(${1:string list1}, ${2:string list2}${3:, ${4:string delimiter}${5:, ${6:string delimiterList1}${7:, ${8:string delimiterList2}${9:, ${10:boolean includeEmptyFields})"]],
        "replaceListNocase": ["string.replaceListNocase()", ["(${1:list1}, ${2:list2})", "(${1:string list1}, ${2:string list2}${3:, ${4:string delimiter}${5:, ${6:string delimiterList1}${7:, ${8:string delimiterList2}${9:, ${10:boolean includeEmptyFields})"]],
        "replaceNocase": ["string.replaceNoCase(substring1, callback[, scope])", ["(${1:substring1}, ${2:callback})", "(${1:string substring1}, ${2:any callback}${3:, ${4:string scope}${5:, ${6:numeric start})"]],
        "reReplace": ["string.reReplace(regex, substring[, scope])", ["(${1:regex}, ${2:substring})", "(${1:string regex}, ${2:string substring}${3:, ${4:string scope})"]],
        "reReplaceNoCase": ["string.reReplaceNoCase(reg_expression, substring[, scope])", ["(${1:reg_expression}, ${2:substring})", "(${1:string reg_expression}, ${2:string substring}${3:, ${4:string scope})"]],
        "reverse": ["string.reverse()", ["()", "()"]],
        "right": ["string.right()", ["(${1:count})", "(${1:numeric count})"]],
        "rJustify": ["string.rJustify()", ["(${1:length})", "(${1:numeric length})"]],
        "some": ["inputString.some(callback)", ["()", "(${1:function callback})"]],
        "sort": ["inputString.sort()", ["()", "()"]],
        "spanExcluding": ["string.spanExcluding()", ["(${1:set})", "(${1:string set})"]],
        "spanIncluding": ["string.spanIncluding()", ["(${1:set})", "(${1:string set})"]],
        "stripCR": ["string.stripCR()", ["()", "()"]],
        "toBase64": ["string.toBase64()", ["()", "(${1:string encoding})"]],
        "toBinary": ["string.toBinary()", ["()", "()"]],
        "trim": ["string.trim()", ["()", "()"]],
        "uCase": ["string.uCase()", ["()", "()"]],
        "urlDecode": ["string.urlDecode()", ["()", "(${1:string charset})"]],
        "urlEncodedFormat": ["string.urlEncodedFormat()", ["()", "(${1:string charset})"]],
        "val": ["string.val()", ["()", "()"]],
        "wrap": ["string.wrap()", ["(${1:limit})", "(${1:numeric limit}${2:, ${3:boolean strip})"]],
        "xmlFormat": ["string.xmlFormat()", ["()", "(${1:boolean escapeChars})"]]
    },
    "struct": {
        "append": ["destStruct.append(sourceStruct [, overwriteFlag])", ["(${1:sourceStruct})", "(${1:struct sourceStruct}${2:, ${3:boolean overwriteFlag})"]],
        "clear": ["struct.clear()", ["()", "()"]],
        "copy": ["struct.copy()", ["()", "()"]],
        "count": ["struct.count()", ["()", "()"]],
        "delete": ["someStruct.delete(key)", ["(${1:key})", "(${1:string key}${2:, ${3:boolean indicateNotExisting})"]],
        "each": ["someStruct.each(function(key, value [, struct]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:any callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "every": ["struct.every(closure [, parallel] [, maxThreads])", ["(${1:closure})", "(${1:function closure}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "filter": ["someStruct.filter(function(key, value [,struct]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "find": ["struct.find(key [, defaultValue ])", ["(${1:key})", "(${1:string key}${2:, ${3:any defaultValue})"]],
        "findkey": ["struct.findKey( value, scope )", ["(${1:value}, ${2:scope})", "(${1:string value}, ${2:string scope})"]],
        "findValue": ["struct.findValue( value, scope )", ["(${1:value})", "(${1:string value}${2:, ${3:string scope})"]],
        "get": ["struct.get()", ["()", "()"]],
        "getMetadata": ["someStruct.getMetadata()", ["()", "()"]],
        "insert": ["struct.insert()", ["(${1:key}, ${2:value})", "(${1:string key}, ${2:any value}${3:, ${4:boolean allowoverwrite})"]],
        "isCaseSensitive": ["inputStruct.isCaseSensitive", ["()", "()"]],
        "isEmpty": ["someStruct.isEmpty()", ["()", "()"]],
        "isOrdered": ["struct.isOrdered()", ["()", "()"]],
        "keyArray": ["someStruct.keyArray()", ["()", "()"]],
        "keyExists": ["struct.keyExists(key)", ["(${1:key})", "(${1:string key})"]],
        "keyList": ["someStruct.keyList([delimiter])", ["()", "(${1:string delimiter})"]],
        "keyTranslate": ["structure.keyTranslate([deepTranslation] [, leaveOriginalKey])", ["()", "(${1:boolean deepTranslation}${2:, ${3:boolean leaveOriginalKey})"]],
        "map": ["someStruct.map(function(key, value [,struct]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:any callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "reduce": ["someStruct.reduce(function(result, key, value [,struct]){} [, initialVal])", ["(${1:callback})", "(${1:any callback}${2:, ${3:any initialVal})"]],
        "setMetadata": ["inputStruct.setMetadata(metaStruct)", ["(${1:metaStruct})", "(${1:struct metaStruct})"]],
        "some": ["struct.some(function(key, value [,struct]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}${4:, ${5:numeric maxThreads})"]],
        "sort": ["struct.sort([sortType, sortOrder, path, localeSensitive])", ["()", "(${1:string sortType}${2:, ${3:string sortOrder}${4:, ${5:string path}${6:, ${7:boolean localeSensitive}${8:, ${9:function callback})"]],
        "tosorted": ["structure.toSorted(callback)", ["()", "(${1:function callback}${2:, ${3:string sorttype}${4:, ${5:string sortorder}${6:, ${7:boolean localeSensitive})"]],
        "update": ["struct.update()", ["(${1:key}, ${2:value})", "(${1:string key}, ${2:any value})"]],
        "valueArray": ["struct.valueArray()", ["()", "()"]]
    },
    "xml": {
        "childPos": ["xml.childPos()", ["(${1:childname}, ${2:n})", "(${1:string childname}, ${2:numeric n})"]],
        "duplicate": ["xml.duplicate()", ["()", "(${1:boolean deepcopy})"]],
        "elemNew": ["xml.elemNew()", ["(${1:childname})", "(${1:string namespace}, ${2:string childname})"]],
        "getNodeType": ["xml.getNodeType()", ["()", "()"]],
        "hasChild": ["xml.hasChild()", ["()", "(${1:string childName})"]],
        "search": ["xml.search()", ["(${1:xpath})", "(${1:string xpath}${2:, ${3:struct params})"]],
        "toString": ["any_value.toString()", ["()", "(${1:string encoding})"]],
        "transform": ["xml.transform()", ["(${1:xsl})", "(${1:string xsl}${2:, ${3:struct parameters})"]],
        "update": ["xml.update()", ["(${1:xpath}, ${2:value})", "(${1:string xpath}, ${2:string value})"]]
    }
}
