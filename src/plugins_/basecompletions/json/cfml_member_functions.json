{
    "array": {
        "append": ["someArray.append(value [, merge])", ["(${1:value})", "(${1:any value}${2:, ${3:boolean merge}})"]],
        "avg": ["someArray.avg()", ["()", "()"]],
        "clear": ["someArray.clear()", ["()", "()"]],
        "contains": ["someArray.contains(value)", ["(${1:value})", "(${1:any value}${2:, ${3:any substringMatch}})"]],
        "delete": ["someArray.delete(value)", ["(${1:value})", "(${1:any value}${2:, ${3:string scope}})"]],
        "deleteAt": ["someArray.deleteAt(index)", ["(${1:index})", "(${1:numeric index})"]],
        "deleteNoCase": ["someArray.deleteNoCase(value)", ["(${1:value})", "(${1:any value})"]],
        "each": ["someArray.each(function(item, [index, [array]]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1: callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "filter": ["someArray.filter(function(item [,index, array]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "find": ["someArray.find(value)", ["(${1:value})", "(${1:any value})"]],
        "findAll": ["someArray.findAll(value or callback)", ["(${1:value or callback})", "(${1:any value or callback})"]],
        "findAllNoCase": ["someArray.findAllNoCase(value or callback)", ["(${1:value or callback})", "(${1:variablename value or callback})"]],
        "findNoCase": ["someArray.findNoCase(value or callback)", ["(${1:value or callback})", "(${1:any value or callback})"]],
        "insertAt": ["someArray.insertAt(position, value)", ["(${1:position}, ${2:value})", "(${1:numeric position}, ${2:any value})"]],
        "isDefined": ["someArray.isDefined(index)", ["(${1:index})", "(${1:numeric index})"]],
        "isEmpty": ["someArray.isEmpty()", ["()", "()"]],
        "len": ["someArray.len()", ["()", "()"]],
        "map": ["someArray.map(function(item [,index, array]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:any callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "max": ["someArray.max()", ["()", "()"]],
        "min": ["someArray.min()", ["()", "()"]],
        "prepend": ["someArray.prepend(value)", ["(${1:value})", "(${1:any value})"]],
        "reduce": ["someArray.reduce(function(result, item [,index, array]){} [, initialValue])", ["(${1:callback})", "(${1:any callback}${2:, ${3:any initialValue}})"]],
        "resize": ["someArray.resize(size)", ["(${1:size})", "(${1:numeric size})"]],
        "set": ["someArray.set(start, end, value)", ["(${1:start}, ${2:end}, ${3:value})", "(${1:numeric start}, ${2:numeric end}, ${3:any value})"]],
        "slice": ["someArray.slice(offset, length)", ["(${1:offset})", "(${1:numeric offset}${2:, ${3:numeric length}})"]],
        "sort": ["someArray.sort(sortType [, sortOrder])", ["(${1:sortType})", "(${1:string sortType}${2:, ${3:string sortOrder}}${4:, ${5:any callback}})"]],
        "sum": ["someArray.sum()", ["(${1:ignoreEmpty})", "(${1:boolean ignoreEmpty})"]],
        "swap": ["someArray.swap(position1, position2)", ["(${1:position1}, ${2:position2})", "(${1:numeric position1}, ${2:numeric position2})"]]
    },
    "date": {
        "add": ["date.add(datepart, number)", ["(${1:datepart}, ${2:number})", "(${1:string datepart}, ${2:numeric number})"]],
        "convert": ["date.convert(conversionType)", ["(${1:conversionType})", "(${1:string conversionType})"]],
        "createODBCDate": ["date.createODBCDate()", ["()", "()"]],
        "createODBCDateTime": ["date.createODBCDateTime()", ["()", "()"]],
        "createODBCTime": ["date.createODBCTime()", ["()", "()"]],
        "dateFormat": ["date.dateFormat([mask])", ["(${1:mask})", "(${1:string mask})"]],
        "dateTimeFormat": ["datetime.dateTimeFormat([mask [, timezone]])", ["(${1:mask})", "(${1:string mask}${2:, ${3:string timezone}})"]],
        "datePart": ["date.datePart(datepart)", ["(${1:datepart}, ${2:date})", "(${1:string datepart}, ${2:date date})"]],
        "day": ["date.day()", ["()", "()"]],
        "dayOfYear": ["date.dayOfYear()", ["()", "()"]],
        "dayOfWeek": ["date.dayOfWeek()", ["(${1:calendar})", "(${1:string calendar})"]],
        "daysInMonth": ["date.daysInMonth()", ["()", "()"]],
        "daysInYear": ["date.daysInYear()", ["()", "()"]],
        "diff": ["date2.diff(datepart, date1)", ["(${1:datepart}, ${2:date2})", "(${1:string datepart}, ${2:date date2})"]],
        "firstDayOfMonth": ["date.firstDayOfMonth()", ["()", "()"]],
        "hour": ["date.hour()", ["()", "()"]],
        "lsDateFormat": ["date.lsDateFormat([mask, locale])", ["(${1:mask})", "(${1:string mask}${2:, ${3:string locale}})"]],
        "lsTimeFormat": ["time.lsTimeFormat([mask])", ["(${1:mask})", "(${1:string mask})"]],
        "minute": ["date.minute()", ["()", "()"]],
        "month": ["date.month()", ["()", "()"]],
        "quarter": ["date.quarter()", ["()", "()"]],
        "second": ["date.second()", ["()", "()"]],
        "timeFormat": ["time.timeFormat([mask])", ["(${1:mask})", "(${1:string mask})"]],
        "week": ["date.week()", ["()", "()"]],
        "year": ["date.year()", ["()", "()"]]
    },
    "display": {
        "booleanFormat": ["booleanFormat(value)", ["()", "()"]],
        "yesNoFormat": ["yesNoFormat(value)", ["()", "()"]]
    },
    "image": {
        "addBorder": ["someImage.addBorder(thickness [, color] [, bordertype])", ["(${1:thickness})", "(${1:string thickness}${2:, ${3:string color}}${4:, ${5:string bordertype}})"]],
        "blur": ["someImage.blur(blurradius)", ["(${1:blurradius})", "(${1:numeric blurradius})"]],
        "clearRect": ["someImage.clearRect(x, y, width, height)", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height})"]],
        "copy": ["someImage.copy(x, y, width, height [, dx] [, dy])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}${5:, ${6:numeric dx}}${7:, ${8:numeric dy}})"]],
        "crop": ["someImage.crop(x, y, width, height)", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height})"]],
        "drawArc": ["someImage.drawArc(x, y, width, height, startAngle, archAngle [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:startAngle}, ${6:archAngle})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}, ${5:numeric startAngle}, ${6:numeric archAngle}${7:, ${8:boolean filled}})"]],
        "drawBeveledRect": ["someImage.drawBeveledRect(x, y, width, height, raised [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:raised})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}, ${5:boolean raised}${6:, ${7:boolean filled}})"]],
        "drawCubicCurve": ["someImage.drawCubicCurve(ctrlx1, ctrly1, ctrlx2, ctrly2, x1, y1, x2, y2)", ["(${1:ctrlx1}, ${2:ctrly1}, ${3:ctrlx2}, ${4:ctrly2}, ${5:x1}, ${6:y1}, ${7:x2}, ${8:y2})", "(${1:string ctrlx1}, ${2:numeric ctrly1}, ${3:numeric ctrlx2}, ${4:numeric ctrly2}, ${5:numeric x1}, ${6:numeric y1}, ${7:numeric x2}, ${8:numeric y2})"]],
        "drawLine": ["someImage.drawLine(x1, y1, x2, y2)", ["(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})", "(${1:numeric x1}, ${2:numeric y1}, ${3:numeric x2}, ${4:numeric y2})"]],
        "drawLines": ["someImage.drawLines(xcords, ycords [, isPolygon] [, filled])", ["(${1:xcords}, ${2:ycords})", "(${1:numeric xcords}, ${2:numeric ycords}${3:, ${4:boolean isPolygon}}${5:, ${6:boolean filled}})"]],
        "drawOval": ["someImage.drawOval(x, y, width, height [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}${5:, ${6:boolean filled}})"]],
        "drawPoint": ["someImage.drawPoint(x, y)", ["(${1:x}, ${2:y})", "(${1:numeric x}, ${2:numeric y})"]],
        "drawQuadraticCurve": ["someImage.drawQuadraticCurve(ctrlx1, ctrly1, x1, y1, x2, y2)", ["(${1:x1}, ${2:y1}, ${3:ctrlx1}, ${4:ctrly1}, ${5:x2}, ${6:y2})", "(${1:numeric x1}, ${2:numeric y1}, ${3:string ctrlx1}, ${4:numeric ctrly1}, ${5:numeric x2}, ${6:numeric y2})"]],
        "drawRect": ["someImage.drawRect(x, y, width, height [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}${5:, ${6:boolean filled}})"]],
        "drawRoundRect": ["someImage.drawRoundRect(x, y, width, height, arcwidth, archeight [, filled])", ["(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:arcwidth}, ${6:archeight})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric width}, ${4:numeric height}, ${5:numeric arcwidth}, ${6:numeric archeight}${7:, ${8:boolean filled}})"]],
        "drawText": ["someImage.drawText(str, x, y, attributecollection)", ["(${1:str}, ${2:x}, ${3:y})", "(${1:string str}, ${2:numeric x}, ${3:numeric y}${4:, ${5:struct attributecollection}})"]],
        "flip": ["someImage.flip(transpose)", ["(${1:transpose})", "(${1:string transpose})"]],
        "getBlob": ["someImage.getBlob()", ["()", "()"]],
        "getBufferedImage": ["someImage.getBufferedImage()", ["()", "()"]],
        "getEXIFTag": ["someImage.getEXIFTag(tagName)", ["(${1:tagName})", "(${1:string tagName})"]],
        "getEXIFMetadata": ["someImage.getExifMetaData()", ["()", "()"]],
        "getHeight": ["someImage.getHeight()", ["()", "()"]],
        "getIPTCTag": ["someImage.getIPTCtag(tagName)", ["(${1:tagName})", "(${1:string tagName})"]],
        "getIPTCMetadata": ["someImage.getIPTCMetaData()", ["()", "()"]],
        "getWidth": ["someImage.getWidth()", ["()", "()"]],
        "grayscale": ["someImage.grayScale()", ["()", "()"]],
        "info": ["someImage.info()", ["()", "()"]],
        "negative": ["someImage.negative()", ["()", "()"]],
        "overlay": ["someImage.overlay(source2 [, rule, alpha])", ["(${1:source2})", "(${1:string source2}${2:, ${3:string rule}}${4:, ${5:string alpha}})"]],
        "paste": ["someImage.paste(image2, x, y)", ["(${1:image2}, ${2:x}, ${3:y})", "(${1:string image2}, ${2:numeric x}, ${3:numeric y})"]],
        "resize": ["someImage.resize(width, height, interpolation, blurfactor)", ["(${1:width}, ${2:height})", "(${1:numeric width}, ${2:numeric height}${3:, ${4:string interpolation}}${5:, ${6:boolean blurfactor}})"]],
        "rotate": ["someImage.rotate([, x] [, y] , angle [, interpolation])", ["(${1:angle})", "(${1:numeric angle}${2:, ${3:numeric x}}${4:, ${5:numeric y}}${6:, ${7:string interpolation}})"]],
        "rotateDrawingAxis": ["someImage.rotateDrawingAxis(angle [, x] [, y])", ["(${1:angle})", "(${1:numeric angle}${2:, ${3:numeric x}}${4:, ${5:numeric y}})"]],
        "scaleToFit": ["someImage.scaleTofit(fitWidth, fitHeight [, interpolation] [, blurFactor])", ["(${1:fitWidth}, ${2:fitHeight})", "(${1:numeric fitWidth}, ${2:numeric fitHeight}${3:, ${4:string interpolation}}${5:, ${6:boolean blurfactor}})"]],
        "setAntialiasing": ["someImage.setAntialiasing(antialias)", ["(${1:antialias})", "(${1:boolean antialias})"]],
        "setBackgroundColor": ["someImage.setBackgroundColor(color)", ["(${1:color})", "(${1: color})"]],
        "setDrawingColor": ["someImage.setDrawingColor(color)", ["(${1:color})", "(${1: color})"]],
        "setDrawingStroke": ["someImage.setDrawingStroke(attributecollection)", ["(${1:attributecollection})", "(${1:struct attributecollection})"]],
        "setDrawingTransparency": ["someImage.setDrawingTransparency(percent)", ["(${1:percent})", "(${1:numeric percent})"]],
        "sharpen": ["someImage.sharpen(gain)", ["(${1:gain})", "(${1:numeric gain})"]],
        "shear": ["someImage.shear(shear [, direction] [, interpolation])", ["(${1:shear})", "(${1:numeric shear}${2:, ${3:string direction}}${4:, ${5:string interpolation}})"]],
        "shearDrawingAxis": ["someImage.shearDrawingAxis(shrx, shry)", ["(${1:shrx}, ${2:shry})", "(${1:numeric shrx}, ${2:numeric shry})"]],
        "translate": ["someImage.translate(xTrans, yTrans [, interpolation])", ["(${1:xTrans}, ${2:yTrans})", "(${1:numeric xTrans}, ${2:numeric yTrans}${3:, ${4:string interpolation}})"]],
        "translateDrawingAxis": ["someImage.translateDrawingAxis(x, y)", ["(${1:x}, ${2:y})", "(${1:numeric x}, ${2:numeric y})"]],
        "write": ["someImage.write([destination] [, quality] [, overwrite])", ["(${1:destination})", "(${1:string destination}${2:, ${3:string quality}}${4:, ${5:boolean overwrite}})"]],
        "writeBase64": ["someImage.writeBase64(destination, format [, inHTMLFormat] [, overwrite])", ["(${1:destination}, ${2:format})", "(${1:string destination}, ${2:string format}${3:, ${4:boolean inHTMLFormat}}${5:, ${6:boolean overwrite}})"]],
        "xorDrawingMode": ["someImage.xorDrawingMode(c1)", ["(${1:c1})", "(${1:string c1})"]]
    },
    "list": {
        "listAppend": ["str.listAppend(value [, delimiters, includeEmptyFields])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})"]],
        "listChangeDelims": ["listChangeDelims(list, new_delimiter [, delimiters, [includeEmptyValues]])", ["(${1:new_delimiter})", "(${1:string new_delimiter}${2:, ${3:string delimiters}}${4:, ${5:string includeEmptyValues}})"]],
        "listContains": ["listContains(list, substring [, delimiters])", ["(${1:substring})", "(${1:string substring}${2:, ${3:string delimiters}})"]],
        "listContainsNoCase": ["listContainsNoCase(list, substring [, delimiters])", ["(${1:substring})", "(${1:string substring}${2:, ${3:string delimiters}})"]],
        "listDeleteAt": ["listDeleteAt(list, position [, delimiters])", ["(${1:position})", "(${1:numeric position}${2:, ${3:string delimiters}})"]],
        "listEach": ["listEach(String str, UDFMethod function [, String delim, boolean includeEmptyFields]);", ["(${1:function}, ${2:delim})", "(${1: function}, ${2: delim}${3:, ${4: includeEmptyFields}})"]],
        "listFind": ["list.listFind(value [, delimiters, includeEmptyValues])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}}${4:, ${5:string includeEmptyValues}})"]],
        "listFindNoCase": ["list.listFindNoCase(value [, delimiters, includeEmptyValues])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}}${4:, ${5:string includeEmptyValues}})"]],
        "listFirst": ["listFirst(list [, delimiters])", ["(${1:delimiters})", "(${1:string delimiters})"]],
        "listGetAt": ["listGetAt(list, position [, delimiters [, includeEmptyValues]])", ["(${1:position})", "(${1:numeric position}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyValues}})"]],
        "listInsertAt": ["listInsertAt(list, position, value [, delimiters])", ["(${1:position}, ${2:value})", "(${1:numeric position}, ${2:string value}${3:, ${4:string delimiters}})"]],
        "listLast": ["listLast(list [, delimiters, includeEmptyValues ])", ["(${1:delimiters})", "(${1:string delimiters}${2:, ${3:boolean includeEmptyValues}})"]],
        "listLen": ["listLen(list [, delimiters, [includeEmptyValues]])", ["(${1:delimiters})", "(${1:string delimiters}${2:, ${3:string includeEmptyValues}})"]],
        "listMap": [" listMap(list, function(item [,index, list]) [,delimiter, includeEmptyFields)", ["(${1:function})", "(${1:any function}${2:, ${3:any intialValue}}${4:, ${5:string delimiter}}${6:, ${7:boolean includeEmptyFields}})"]],
        "listPrepend": ["someList.listPrepend( value [, delimiters, includeEmptyFields])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})"]],
        "listQualify": ["listQualify(list, qualifier [, delimiters] [, elements] [, includeEmptyValues])", ["(${1:qualifier})", "(${1:string qualifier}${2:, ${3:string delimiters}}${4:, ${5:string elements}}${6:, ${7:boolean includeEmptyFields}})"]],
        "listReduce": [" listReduce(list, function(result, item [,index, list]) [,initialValue, delimiter, includeEmptyFields])", ["(${1:function}, ${2:intialValue}, ${3:delimiter}, ${4:includeEmptyFields})", "(${1:any function}, ${2:any intialValue}, ${3:string delimiter}, ${4:boolean includeEmptyFields})"]],
        "listRest": ["listRest(list [, delimiters])", ["(${1:delimiters})", "(${1:string delimiters})"]],
        "listSetAt": ["listSetAt(list, position, value [, delimiters])", ["(${1:position}, ${2:value})", "(${1:numeric position}, ${2:string value}${3:, ${4:string delimiters}})"]],
        "listSort": ["listSort(list, sort_type [, sort_order] [, delimiters])", ["(${1:sort_type})", "(${1:string sort_type}${2:, ${3:string sort_order}}${4:, ${5:string delimiters}})"]],
        "listToArray": ["listToArray(list [, delimiters] [, includeEmptyFields] [, multiCharacterDelimiter])", ["(${1:delimiters})", "(${1:string delimiters}${2:, ${3:boolean includeEmptyFields}}${4:, ${5:boolean multiCharacterDelimiter}})"]],
        "listValueCount": ["listValueCount(list, value [, delimiters])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}})"]],
        "listValueCountNoCase": ["listValueCountNoCase(list, value [, delimiters])", ["(${1:value})", "(${1:string value}${2:, ${3:string delimiters}})"]]
    },
    "query": {
        "addColumn": ["queryAddColumn(query, column_name [, datatype], array_name)", ["(${1:column_name}, ${2:array_name})", "(${1:string column_name}${2:, ${3:string datatype}}, ${4:array array_name})"]],
        "addRow": ["queryAddRow(query [, number/row(s)])", ["(${1:number/row(s)})", "(${1:numeric / array / struct number/row(s)})"]],
        "convertForGrid": ["queryConvertForGrid(query, page, pageSize)", ["(${1:page}, ${2:pageSize})", "(${1:numeric page}, ${2:numeric pageSize})"]],
        "each": ["query.each(function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:any callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "filter": ["query.filter(function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "getResult": ["queryGetResult(query)", ["()", "()"]],
        "getRow": ["queryGetRow( query, rowNumber );", ["(${1:rowNumber})", "(${1: rowNumber})"]],
        "keyExists": ["query.keyExists(key)", ["(${1:key})", "(${1:string key})"]],
        "map": ["query.map(function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "reduce": ["queryReduce(struct, function(result, row [, currentRow] [, query]){} [, initialVal])", ["(${1:callback})", "(${1:any callback}${2:, ${3:any initialValue}})"]],
        "setCell": ["querySetCell(query, column, value [, row])", ["(${1:column}, ${2:value})", "(${1:string column}, ${2:any value}${3:, ${4:numeric row}})"]],
        "sort": ["query.sort(sortFunction)", ["(${1:sortFunction})", "(${1:function sortFunction}${2:, ${3:string direction}})"]],
        "valueArray": ["valueArray(query, column)", ["(${1:column})", "(${1:string column})"]]
    },
    "spreadsheet": {
        "addAutoFilter": ["spreadsheetAddAutoFilter(SpreadsheetObj, autofilter)", ["(${1:autofilter})", "(${1:string autofilter})"]],
        "addColumn": ["spreadsheetAddColumn(spreadsheetObj, data, startrow, startcolumn, insert [, insert])", ["(${1:data}, ${2:startrow}, ${3:startcolumn}, ${4:insert})", "(${1:string data}, ${2:numeric startrow}, ${3:numeric startcolumn}, ${4:boolean insert}${5:, ${6:boolean insert}})"]],
        "addFreezePane": ["spreadsheetAddFreezePane(spreadsheetObj, column, row [, endColumn] [, endRow])", ["(${1:freezeColumn}, ${2:freezeRow})", "(${1:numeric freezeColumn}, ${2:numeric freezeRow}${3:, ${4:numeric hideColumn}}${5:, ${6:numeric hideRow}})"]],
        "addImage": ["spreadsheetAddimage(spreadsheetObj, imagefilepath, anchor)", ["(${1:imagefilepath}, ${2:anchor})", "(${1:string imagefilepath}, ${2:string anchor})"]],
        "addInfo": ["spreadsheetAddInfo(spreadsheetObj, info)", ["(${1:info})", "(${1:struct info})"]],
        "addPageBreaks": ["spreadsheetAddPagebreaks(SpreadsheetObj, rowbreaks, colbreaks)", ["(${1:rowbreaks}, ${2:colbreaks})", "(${1:string rowbreaks}, ${2:string colbreaks})"]],
        "addRow": ["spreadsheetAddRow(spreadsheetObj, data [, row] [, column] [, insert] [, datatype])", ["(${1:data})", "(${1:string data}${2:, ${3:numeric row}}${4:, ${5:numeric column}}${6:, ${7:boolean insert}}${8:, ${9:array datatype}})"]],
        "addRows": ["spreadsheetAddRows(spreadsheetObj, data,[ row, column , insert, datatype, includeColumnNames])", ["(${1:data})", "(${1:any data}${2:, ${3:numeric row}}${4:, ${5:numeric column}}${6:, ${7:boolean insert}}${8:, ${9:array datatype}}${10:, ${11:boolean includeColumnNames}})"]],
        "addSplitPane": ["spreadsheetAddSplitPane(spreadsheetObj, x, y, splitColumn, splitRow [, position])", ["(${1:x}, ${2:y}, ${3:splitColumn}, ${4:splitRow})", "(${1:numeric x}, ${2:numeric y}, ${3:numeric splitColumn}, ${4:numeric splitRow}${5:, ${6:string position}})"]],
        "createSheet": ["spreadsheetCreateSheet(spreadsheetObj, name)", ["(${1:name})", "(${1:string name})"]],
        "deleteColumn": ["spreadsheetDeleteColumn(spreadsheetObj, column)", ["(${1:column})", "(${1:numeric column})"]],
        "deleteColumns": ["spreadsheetDeleteColumns(spreadsheetObj, range)", ["(${1:range})", "(${1:numeric range})"]],
        "deleteRow": ["spreadsheetDeleteRow(spreadsheetObj, row)", ["(${1:row})", "(${1:numeric row})"]],
        "deleteRows": ["spreadsheetDeleteRows(spreadsheetObj, range)", ["(${1:range})", "(${1:numeric range})"]],
        "formatCell": ["spreadsheetFormatCell(spreadsheetObj, format, row, column)", ["(${1:format}, ${2:row}, ${3:column})", "(${1:struct format}, ${2:numeric row}, ${3:numeric column})"]],
        "formatCellRange": ["spreadsheetFormatCellRange (spreadsheetObj, format, startRow, startColumn, endRow, endColumn)", ["(${1:format}, ${2:startRow}, ${3:startColumn}, ${4:endRow}, ${5:endColumn})", "(${1:struct format}, ${2:numeric startRow}, ${3:numeric startColumn}, ${4:numeric endRow}, ${5:numeric endColumn})"]],
        "formatColumn": ["spreadsheetFormatColumn(spreadsheetObj, format, column)", ["(${1:format}, ${2:column})", "(${1:struct format}, ${2:numeric column})"]],
        "formatColumns": ["spreadsheetFormatColumns(spreadsheetObj, format, columns)", ["(${1:format}, ${2:columns})", "(${1:string format}, ${2:string columns})"]],
        "formatRow": ["spreadsheetFormatRow(spreadsheetObj, format, row)", ["(${1:format}, ${2:row})", "(${1:struct format}, ${2:numeric row})"]],
        "formatRows": ["spreadsheetFormatRows(spreadsheetObj, format, rows)", ["(${1:format}, ${2:rows})", "(${1:struct format}, ${2:string rows})"]],
        "getCellComment": ["spreadsheetGetCellComment(author [, column] [, comment] [, row])", ["(${1:column})", "(${1:numeric column}${2:, ${3:string comment}}${4:, ${5:string row}})"]],
        "getCellFormula": ["spreadsheetGetCellFormula(spreadsheetObj, row, column)", ["(${1:row}, ${2:column})", "(${1:numeric row}, ${2:numeric column})"]],
        "getCellValue": ["spreadsheetGetCellValue(spreadsheetObj, row, column)", ["(${1:row}, ${2:column})", "(${1:string row}, ${2:string column})"]],
        "getColumnCount": ["spreadsheetAddRow(spreadsheetObj, [sheet])", ["(${1:sheet})", "(${1:string sheet})"]],
        "info": ["spreadsheetInfo(spreadsheetObj)", ["()", "()"]],
        "mergeCells": ["spreadsheetMergeCells(spreadsheetObj, startrow, endrow, startcolumn, endcolumn)", ["(${1:startrow}, ${2:endrow}, ${3:startcolumn}, ${4:endcolumn})", "(${1:numeric startrow}, ${2:numeric endrow}, ${3:numeric startcolumn}, ${4:numeric endcolumn})"]],
        "readBinary": ["spreadsheetReadBinary(spreadsheetObj)", ["()", "()"]],
        "removeSheet": ["spreadsheetRemoveSheet (spreadsheetObj, sheetname);", ["(${1:sheetname})", "(${1: sheetname})"]],
        "setActiveSheet": ["spreadsheetSetActiveSheet(spreadsheetObj [, name])", ["(${1:name})", "(${1:string name})"]],
        "setActiveSheetNumber": ["spreadsheetSetActiveSheetNumber(spreadsheetObj [, number])", ["(${1:number})", "(${1:numeric number})"]],
        "setCellComment": ["spreadsheetSetCellComment(spreadsheetObj, comment, row, column)", ["(${1:comment}, ${2:row}, ${3:column})", "(${1:string comment}, ${2:numeric row}, ${3:numeric column})"]],
        "setCellFormula": ["spreadsheetSetCellFormula(spreadsheetObj, formula, row, column)", ["(${1:formula}, ${2:row}, ${3:column})", "(${1:string formula}, ${2:numeric row}, ${3:numeric column})"]],
        "setCellValue": ["spreadsheetSetCellValue(spreadsheetObj, value, row, column)", ["(${1:value}, ${2:row}, ${3:column})", "(${1:string value}, ${2:numeric row}, ${3:numeric column})"]],
        "setColumnWidth": ["spreadsheetSetColumnWidth(spreadsheetObj, columnNumber, width)", ["(${1:columnNumber}, ${2:width})", "(${1:numeric columnNumber}, ${2:numeric width})"]],
        "setFooter": ["spreadsheetSetFooter(spreadsheetObj, leftFooter, centerFooter, rightFooter)", ["(${1:leftFooter}, ${2:centerFooter}, ${3:rightFooter})", "(${1:string leftFooter}, ${2:string centerFooter}, ${3:string rightFooter})"]],
        "setHeader": ["spreadsheetSetHeader(spreadsheetObj, leftHeader, centerHeader, rightHeader)", ["(${1:leftHeader}, ${2:centerHeader}, ${3:rightHeader})", "(${1:string leftHeader}, ${2:string centerHeader}, ${3:string rightHeader})"]],
        "setRowHeight": ["spreadsheetSetRowHeight(spreadsheetObj, rowNumber, height)", ["(${1:rowNumber}, ${2:height})", "(${1:numeric rowNumber}, ${2:numeric height})"]],
        "shiftColumns": ["spreadsheetShiftColumns(spreadsheetObj, start [, end] [, start])", ["(${1:start})", "(${1:numeric start}${2:, ${3:numeric end}}${4:, ${5:numeric start}})"]],
        "shiftRows": ["spreadsheetShiftRows(spreadsheetObj, start, end [, rows])", ["(${1:start}, ${2:end})", "(${1:numeric start}, ${2:numeric end}${3:, ${4:numeric rows}})"]],
        "write": ["spreadsheetwrite(spreadsheetObj, fileName [, password] [, overwrite])", ["(${1:fileName})", "(${1:string fileName}${2:, ${3:string password}}${4:, ${5:boolean overwrite}})"]]
    },
    "string": {
        "cJustify": ["cJustify(string, length)", ["(${1:length})", "(${1:numeric length})"]],
        "canonicalize": ["canonicalize(input, restrictMultiple, restrictMixed)", ["(${1:restrictMultiple}, ${2:restrictMixed})", "(${1:boolean restrictMultiple}, ${2:boolean restrictMixed}${3:, ${4:boolean throwOnError}})"]],
        "compare": ["compare(string1, string2)", ["(${1:string2})", "(${1:string string2})"]],
        "compareNoCase": ["compareNoCase(string1, string2)", ["(${1:string2})", "(${1:string string2})"]],
        "decodeForHTML": ["decodeForHTML(string);", ["()", "()"]],
        "decodeFromURL": ["decodeFromURL(string);", ["()", "()"]],
        "encodeForCSS": ["encodeForCSS(string [,canonicalize]);", ["(${1:canonicalize})", "(${1:boolean canonicalize})"]],
        "encodeForHTML": ["encodeForHTML(string [, canonicalize])", ["(${1:canonicalize})", "(${1:boolean canonicalize})"]],
        "encodeForHTMLAttribute": ["encodeForHTMLAttribute(string [, canonicalize])", ["(${1:canonicalize})", "(${1:boolean canonicalize})"]],
        "encodeForJavaScript": ["encodeForJavaScript(string [, canonicalize])", ["(${1:canonicalize})", "(${1:boolean canonicalize}${2:, ${3:boolean canonicalize}})"]],
        "encodeForURL": ["encodeForURL(string [,canonicalize]);", ["(${1:canonicalize})", "(${1:boolean canonicalize})"]],
        "encodeForXML": ["encodeForXML(string , [canonicalize]);", ["(${1:canonicalize})", "(${1:boolean canonicalize})"]],
        "encodeForXMLAttribute": ["encodeForXMLAttribute(string [,canonicalize]);", ["(${1:canonicalize})", "(${1:boolean canonicalize})"]],
        "encodeForXPath": ["encodeForXPath(string [,canonicalize]);", ["(${1:canonicalize})", "(${1:boolean canonicalize})"]],
        "encrypt": ["encrypt(string, key [, algorithm [, encoding] [, iv | salt [, iterations]]])", ["(${1:key})", "(${1:string key}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:binary iv}}${8:, ${9:binary salt}}${10:, ${11:numeric iterations}})"]],
        "find": ["find(substring, string [, start])", ["(${1:string})", "(${1:string string}${2:, ${3:numeric start}})"]],
        "findNoCase": ["findNoCase(substring, string [, start])", ["(${1:string})", "(${1:string string}${2:, ${3:numeric start}})"]],
        "findOneOf": ["findOneOf(set, string [, start])", ["(${1:string})", "(${1:string string}${2:, ${3:numeric start}})"]],
        "getSafeHTML": ["getSafeHTML(inputString [, PolicyFile, throwOnError])", ["(${1:PolicyFile}, ${2:throwOnError})", "(${1:string PolicyFile}, ${2:boolean throwOnError})"]],
        "getToken": ["getToken(string, index [, delimiters])", ["(${1:index})", "(${1:numeric index}${2:, ${3:string delimiters}})"]],
        "insert": ["insert(substring, String, position)", ["(${1:String}, ${2:position})", "(${1:string String}, ${2:numeric position})"]],
        "isSafeHTML": ["isSafeHTML(inputString [, PolicyFile])", ["(${1:PolicyFile})", "(${1:string PolicyFile})"]],
        "lCase": ["lCase(String)", ["()", "()"]],
        "lJustify": ["lJustify(String, length)", ["(${1:length})", "(${1:numeric length})"]],
        "left": ["string.left(count)", ["(${1:count})", "(${1:numeric count})"]],
        "len": ["len(Object)", ["()", "()"]],
        "mid": ["mid(String, start, count)", ["(${1:start}, ${2:count})", "(${1:numeric start}, ${2:numeric count})"]],
        "paragraphFormat": ["paragraphFormat(String)", ["()", "()"]],
        "rJustify": ["rJustify(String, length)", ["(${1:length})", "(${1:numeric length})"]],
        "removeChars": ["removeChars(String, start, count)", ["(${1:start}, ${2:count})", "(${1:numeric start}, ${2:numeric count})"]],
        "repeatString": ["repeatString(String, count)", ["(${1:count})", "(${1:numeric count})"]],
        "replace": ["replace(String, substring1, substring2 [, scope])", ["(${1:substring1}, ${2:substring2})", "(${1:string substring1}, ${2:string substring2}${3:, ${4:string scope}})"]],
        "replaceList": ["replaceList(String, list1, list2 [, includeEmptyFields])\nreplaceList(String, list1, list2, delimiter [, includeEmptyFields])\nreplaceList(String, list1, list2, delimiterList1, delimiterList2 [, includeEmptyFields])", ["(${1:list1}, ${2:list2})", "(${1:string list1}, ${2:string list2}${3:, ${4:string delimiter}}${5:, ${6:string delimiterList1}}${7:, ${8:string delimiterList2}}${9:, ${10:boolean includeEmptyFields}})"]],
        "replaceListNoCase": ["replaceListNoCase(String, list1, list2, includeEmptyFields)\nreplaceListNoCase(String, list1, list2, delimiter, includeEmptyFields)\nreplaceListNoCase(String, list1, list2, delimiterList1, delimiterList2, includeEmptyFields)", ["(${1:list1}, ${2:list2})", "(${1:string list1}, ${2:string list2}${3:, ${4:string delimiter}}${5:, ${6:string delimiterList1}}${7:, ${8:string delimiterList2}}${9:, ${10:boolean includeEmptyFields}})"]],
        "replaceNoCase": ["replaceNoCase(String, substring1, substring2 [, scope])", ["(${1:substring1}, ${2:substring2})", "(${1:string substring1}, ${2:string substring2}${3:, ${4:string scope}})"]],
        "reverse": ["reverse(String)", ["()", "()"]],
        "right": ["right(String, count)", ["(${1:count})", "(${1:numeric count})"]],
        "spanExcluding": ["spanExcluding(String, set)", ["(${1:set})", "(${1:string set})"]],
        "spanIncluding": ["spanIncluding(String, set)", ["(${1:set})", "(${1:string set})"]],
        "stripCR": ["stripCR(String)", ["()", "()"]],
        "trim": ["trim(String)", ["()", "()"]],
        "uCase": ["uCase(String)", ["()", "()"]],
        "urlDecode": ["urlDecode(urlencodedstring [, charset])", ["(${1:charset})", "(${1:string charset})"]],
        "urlEncodedFormat": ["urlEncodedFormat(String [, charset])", ["(${1:charset})", "(${1:string charset})"]],
        "wrap": ["wrap(String, limit [, strip])", ["(${1:limit})", "(${1:numeric limit}${2:, ${3:boolean strip}})"]]
    },
    "struct": {
        "append": ["destStruct.append(sourceStruct [, overwriteFlag])", ["(${1:sourceStruct})", "(${1:struct sourceStruct}${2:, ${3:boolean overwriteFlag}})"]],
        "clear": ["structClear(structure)", ["()", "()"]],
        "copy": ["structCopy(structure)", ["()", "()"]],
        "count": ["structCount(structure)", ["()", "()"]],
        "delete": ["structDelete(structure, key [, indicateNotExisting])", ["(${1:key})", "(${1:string key}${2:, ${3:boolean indicateNotExisting}})"]],
        "each": ["someStruct.each(function(key, value [, struct]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:any callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "filter": ["someStruct.filter(function(key, value [,struct]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:boolean callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "find": ["struct.find(key [, defaultValue ])", ["(${1:key})", "(${1:string key}${2:, ${3:any defaultValue}})"]],
        "findValue": ["struct.findValue( value, scope )", ["(${1:value})", "(${1:string value}${2:, ${3:string scope}})"]],
        "findKey": ["struct.findKey( value, scope )", ["(${1:value}, ${2:scope})", "(${1:string value}, ${2:string scope})"]],
        "insert": ["structInsert(structure, key, value [, allowoverwrite])", ["(${1:key}, ${2:value})", "(${1:string key}, ${2:any value}${3:, ${4:boolean allowoverwrite}})"]],
        "isEmpty": ["someStruct.isEmpty()", ["()", "()"]],
        "keyArray": ["someStruct.keyArray()", ["()", "()"]],
        "keyExists": ["struct.keyExists(key)", ["(${1:key})", "(${1:string key})"]],
        "keyList": ["someStruct.keyList([delimiter])", ["(${1:delimiter})", "(${1:string delimiter})"]],
        "map": ["someStruct.map(function(key, value [,struct]){} [, parallel] [, maxThreads])", ["(${1:callback})", "(${1:any callback}${2:, ${3:boolean parallel}}${4:, ${5:numeric maxThreads}})"]],
        "reduce": ["structReduce(struct, function(result, key, value [,struct]){} [, initialVal])", ["(${1:callback}, ${2:initialVal})", "(${1:any callback}, ${2:any initialVal})"]],
        "sort": ["structSort(base, sorttype, sortorder, pathtosubelement, localeSensitive)\nstructSort(base, callback)", ["(${1:sorttype})", "(${1:string sorttype}${2:, ${3:string sortorder}}${4:, ${5:string pathtosubelement}}${6:, ${7:boolean localeSensitive}}${8:, ${9:function callback}})"]],
        "update": ["structUpdate(structure, key, value)", ["(${1:key}, ${2:value})", "(${1:string key}, ${2:any value})"]]
    },
    "xml": {
        "childPos": ["xmlChildPos(elem, childname, n)", ["(${1:childname}, ${2:n})", "(${1:string childname}, ${2:numeric n})"]],
        "elemNew": ["xmlElemNew(xmlobj [, namespace], childname)", ["(${1:namespace}, ${2:childname})", "(${1:string namespace}, ${2:string childname})"]],
        "getNodeType": ["xmlGetNodeType(xmlNode)", ["()", "()"]],
        "search": ["xmlSearch(xmlNode, xpath [, params])", ["(${1:xpath})", "(${1:string xpath}${2:, ${3:struct params}})"]],
        "transform": ["xmlTransform(xml, xsl [, parameters])", ["(${1:xsl})", "(${1:string xsl}${2:, ${3:struct parameters}})"]]
    }
}