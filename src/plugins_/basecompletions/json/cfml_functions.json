{
    "abs": ["abs(number)", ["(${1:number})", "(${1:numeric number})"]],
    "acos": ["acos(number)", ["(${1:number})", "(${1:numeric number})"]],
    "addSOAPRequestHeader": ["addSOAPRequestHeader(webservice, namespace, name, value, mustUnderstand)", ["(${1:webservice}, ${2:namespace}, ${3:name}, ${4:value})", "(${1:string webservice}, ${2:string namespace}, ${3:string name}, ${4:string value}${5:, ${6:boolean mustUnderstand}})"]],
    "addSOAPResponseHeader": ["addSOAPResponseHeader(namespace, name, value [, mustUnderstand])", ["(${1:namespace}, ${2:name}, ${3:value})", "(${1:string namespace}, ${2:string name}, ${3:string value}${4:, ${5:boolean mustUnderstand}})"]],
    "ajaxLink": ["ajaxLink(url)", ["(${1:url})", "(${1:string url})"]],
    "ajaxOnLoad": ["ajaxOnLoad(functionName)", ["(${1:functionName})", "(${1:string functionName})"]],
    "applicationStartTime": ["applicationStartTime()", ["()", "()"]],
    "applicationStop": ["applicationStop()", ["()", "()"]],
    "array": ["array()", ["(${1:values})", "(${1:any values})"]],
    "arrayAppend": ["arrayAppend(array, value [, merge])", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value}${3:, ${4:boolean merge}})"]],
    "arrayAvg": ["arrayAvg(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayClear": ["arrayClear(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayContains": ["arrayContains(array, value)", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value}${3:, ${4:any substringMatch}})"]],
    "arrayContainsNoCase": ["arrayContainsNoCase(array, value)", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"]],
    "arrayDelete": ["arrayDelete(array, value)", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value}${3:, ${4:string scope}})"]],
    "arrayDeleteAt": ["arrayDeleteAt(array, index)", ["(${1:array}, ${2:index})", "(${1:array array}, ${2:numeric index})"]],
    "arrayDeleteNoCase": ["arrayDeleteNoCase(array, value)", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"]],
    "arrayEach": ["arrayEach(array, function(item, [index, [array]]){} [, parallel] [, maxThreads])", ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:boolean callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "arrayEvery": ["arrayEvery(array array, function(item, [index, [array]]) closure, [boolean parallel], [number maxThreads])", ["(${1:array}, ${2:closure})", "(${1:array array}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:boolean maxThreads}})"]],
    "arrayFilter": ["arrayFilter(array, function(item [,index, array]){} [, parallel] [, maxThreads])", ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:boolean callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "arrayFind": ["arrayFind(array, value)", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"]],
    "arrayFindAll": ["arrayFindAll(array, value or callback)", ["(${1:array})", "(${1:array array}${2:, ${3:any value or callback}})"]],
    "arrayFindAllNoCase": ["arrayFindAllNoCase(array, value or callback)", ["(${1:array}, ${2:value or callback})", "(${1:array array}, ${2:variablename value or callback})"]],
    "arrayFindNoCase": ["arrayFindNoCase(array, value or callback)", ["(${1:array}, ${2:value or callback})", "(${1:array array}, ${2:any value or callback})"]],
    "arrayFirst": ["arrayFirst(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayGetMetadata": ["arrayGetMetadata(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayIndexExists": ["arrayIndexExists(array, index)", ["(${1:array}, ${2:index})", "(${1:array array}, ${2:numeric index})"]],
    "arrayInsertAt": ["arrayInsertAt(array, position, value)", ["(${1:array}, ${2:position}, ${3:value})", "(${1:array array}, ${2:numeric position}, ${3:any value})"]],
    "arrayIsDefined": ["arrayIsDefined(array, index)", ["(${1:array}, ${2:index})", "(${1:string array}, ${2:numeric index})"]],
    "arrayIsEmpty": ["arrayIsEmpty(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayLast": ["arrayLast(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayLen": ["arrayLen(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayMap": ["arrayMap(array, function(item [,index, array]){} [, parallel] [, maxThreads])", ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:any callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "arrayMax": ["arrayMax(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayMedian": ["arrayMedian(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayMerge": ["arrayMerge(array1, array2 [, leaveIndex])", ["(${1:array1}, ${2:array2})", "(${1:array array1}, ${2:array array2}${3:, ${4:boolean leaveIndex}})"]],
    "arrayMid": ["arrayMid(array, start [, count])", ["(${1:array}, ${2:start})", "(${1:array array}, ${2:numeric start}${3:, ${4:numeric count}})"]],
    "arrayMin": ["arrayMin(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayNew": ["arrayNew(dimension [, isSynchronized])", ["(${1:dimension})", "(${1:numeric dimension}${2:, ${3:boolean isSynchronized}})"]],
    "arrayPop": ["arrayPop(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayPrepend": ["arrayPrepend(array, value)", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"]],
    "arrayPush": ["arrayPush(array, value)", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"]],
    "arrayReduce": ["arrayReduce(array, function(result, item [,index, array]){} [, initialValue])", ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:any callback}${3:, ${4:any initialValue}})"]],
    "arrayReduceRight": ["arrayReduceRight(array, function(result, item [,index, array]){} [, initialValue])", ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:any callback}${3:, ${4:any initialValue}})"]],
    "arrayResize": ["arrayResize(array, size)", ["(${1:array}, ${2:size})", "(${1:array array}, ${2:numeric size})"]],
    "arrayReverse": ["arrayReverse(array)", ["(${1:array})", "(${1:array array})"]],
    "arraySet": ["arraySet(array, start, end, value)", ["(${1:array}, ${2:start}, ${3:end}, ${4:value})", "(${1:array array}, ${2:numeric start}, ${3:numeric end}, ${4:any value})"]],
    "arraySetMetadata": ["arraySetMetadata(array, metadata)", ["(${1:array}, ${2:metadata})", "(${1:array array}, ${2:struct metadata})"]],
    "arrayShift": ["arrayShift(array)", ["(${1:array})", "(${1:array array})"]],
    "arraySlice": ["arraySlice(array, offset, length)", ["(${1:array}, ${2:offset})", "(${1:array array}, ${2:numeric offset}${3:, ${4:numeric length}})"]],
    "arraySome": ["arraySome(array, function(item [,index, array]){} [, parallel] [, maxThreads])", ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:boolean callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "arraySort": ["arraySort(array, sortType [, sortOrder])\n or \n arraySort(array, callback)", ["(${1:array}, ${2:sortType})", "(${1:array array}, ${2:string sortType}${3:, ${4:string sortOrder}}${5:, ${6:any callback}})"]],
    "arraySplice": ["arraySplice(array, index[, elementCountForRemoval, replacements])", ["(${1:array}, ${2:index})", "(${1:array array}, ${2:numeric index}${3:, ${4:numeric elementCountForRemoval}}${5:, ${6:array replacements}})"]],
    "arraySum": ["arraySum(array)", ["(${1:array})", "(${1:array array}${2:, ${3:boolean ignoreEmpty}})"]],
    "arraySwap": ["arraySwap(array, position1, position2)", ["(${1:array}, ${2:position1}, ${3:position2})", "(${1:array array}, ${2:numeric position1}, ${3:numeric position2})"]],
    "arrayToList": ["arrayToList(array [, delimiter])", ["(${1:array})", "(${1:array array}${2:, ${3:string delimiter}})"]],
    "arrayToStruct": ["arrayToStruct(array)", ["(${1:array})", "(${1:array array})"]],
    "arrayUnshift": ["arrayUnshift(array, value)", ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"]],
    "asc": ["asc(string)", ["(${1:string})", "(${1:string string})"]],
    "asin": ["asin(number)", ["(${1:number})", "(${1:numeric number})"]],
    "atn": ["atn(number)", ["(${1:number})", "(${1:numeric number})"]],
    "beat": ["beat([time])", ["(${1:time})", "(${1:any time})"]],
    "binaryDecode": ["binaryDecode(string, encoding)", ["(${1:string}, ${2:encoding})", "(${1:string string}, ${2:string encoding})"]],
    "binaryEncode": ["binaryEncode(binaryData, encoding)", ["(${1:binaryData}, ${2:encoding})", "(${1:binary binaryData}, ${2:string encoding})"]],
    "bitAnd": ["bitAnd(number1, number2)", ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"]],
    "bitMaskClear": ["bitMaskClear(number, start, length)", ["(${1:number}, ${2:start}, ${3:length})", "(${1:numeric number}, ${2:numeric start}, ${3:numeric length})"]],
    "bitMaskRead": ["bitMaskRead(number, start, length)", ["(${1:number}, ${2:start}, ${3:length})", "(${1:numeric number}, ${2:numeric start}, ${3:numeric length})"]],
    "bitMaskSet": ["bitMaskSet(number, mask, start, length)", ["(${1:number}, ${2:mask}, ${3:start}, ${4:length})", "(${1:numeric number}, ${2:numeric mask}, ${3:numeric start}, ${4:numeric length})"]],
    "bitNot": ["bitNot(number)", ["(${1:number})", "(${1:numeric number})"]],
    "bitOr": ["bitOr(number1, number2)", ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"]],
    "bitShln": ["bitShln(number, count)", ["(${1:number}, ${2:count})", "(${1:numeric number}, ${2:numeric count})"]],
    "bitShrn": ["bitShrn(number, count)", ["(${1:number}, ${2:count})", "(${1:numeric number}, ${2:numeric count})"]],
    "bitXor": ["bitXor(number1, number2)", ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"]],
    "booleanFormat": ["booleanFormat(value)", ["(${1:value})", "(${1:numeric value})"]],
    "bundleInfo": ["bundleInfo(obj)", ["(${1:obj})", "(${1:any obj})"]],
    "cacheClear": ["cacheClear([filter] [, cacheName])", ["(${1:filterOrTags})", "(${1:any filterOrTags}${2:, ${3:string cacheName}})"]],
    "cacheCount": ["cacheCount([cacheName])", ["(${1:cacheName})", "(${1:string cacheName})"]],
    "cacheDelete": ["cacheDelete(id [, throwOnError] [, cacheName])", ["(${1:id})", "(${1:string id}${2:, ${3:boolean throwOnError}}${4:, ${5:string cacheName}})"]],
    "cacheGet": ["cacheGet(id [,region])", ["(${1:id})", "(${1:string id}${2:, ${3:string region}}${4:, ${5:string cacheName}}${6:, ${7:boolean throwWhenNotExist}})"]],
    "cacheGetAll": ["cacheGetAll([filter] [, cacheName])", ["(${1:filter})", "(${1:string filter}${2:, ${3:string cacheName}})"]],
    "cacheGetAllIds": ["cacheGetAllIds()", ["()", "()"]],
    "cacheGetDefaultCacheName": ["cacheGetDefaultCacheName(type)", ["(${1:type})", "(${1:string type})"]],
    "cacheGetEngineProperties": ["cacheGetEngineProperties()", ["()", "()"]],
    "cacheGetMetadata": ["cacheGetMetadata(id [, objectType] [, region])", ["(${1:id})", "(${1:string id}${2:, ${3:string objectType}}${4:, ${5:string region}})"]],
    "cacheGetProperties": ["cacheGetProperties(region)", ["(${1:region})", "(${1:string region})"]],
    "cacheGetSession": ["cacheGetSession(objectType)", ["(${1:objectType})", "(${1:string objectType}${2:, ${3:boolean isKey}})"]],
    "cacheIdExists": ["cacheIdExists(id [, region])", ["(${1:id})", "(${1:string id}${2:, ${3:string region}})"]],
    "cacheKeyExists": ["cacheKeyExists(key [, cacheName])", ["(${1:key})", "(${1:string key}${2:, ${3:string cacheName}})"]],
    "cachePut": ["cachePut(id, value [, timespan] [, idleTime] [, region] [, throwOnError])", ["(${1:id}, ${2:value})", "(${1:string id}, ${2:string value}${3:, ${4:date timespan}}${5:, ${6:date idleTime}}${7:, ${8:string region}}${9:, ${10:boolean throwOnError}})"]],
    "cacheRegionExists": ["cacheRegionExists(region)", ["(${1:region})", "(${1:string region}${2:, ${3:string password }})"]],
    "cacheRegionNew": ["cacheRegionNew(region [, properties] [, throwOnError])", ["(${1:region})", "(${1:string region}${2:, ${3:struct properties}}${4:, ${5:boolean throwOnError}}${6:, ${7:string password }})"]],
    "cacheRegionRemove": ["cacheRegionRemove(region)", ["(${1:region})", "(${1:string region}${2:, ${3:string password }})"]],
    "cacheRemove": ["cacheRemove(id [, throwOnError [, region[, exact]]])", ["(${1:id})", "(${1:any id}${2:, ${3:boolean throwOnError}}${4:, ${5:string region}}${6:, ${7:boolean exact}})"]],
    "cacheRemoveAll": ["cacheRemoveAll( region )", ["(${1:region})", "(${1:string region})"]],
    "cacheSetProperties": ["cacheSetProperties(properties)", ["(${1:properties})", "(${1:struct properties}${2:, ${3:string region}})"]],
    "callStackDump": ["callStackDump(output)", ["(${1:output})", "(${1:string output})"]],
    "callStackGet": ["callStackGet()", ["()", "()"]],
    "canonicalize": ["canonicalize(input, restrictMultiple, restrictMixed)", ["(${1:input}, ${2:restrictMultiple}, ${3:restrictMixed})", "(${1:string input}, ${2:boolean restrictMultiple}, ${3:boolean restrictMixed}${4:, ${5:boolean throwOnError}})"]],
    "ceiling": ["ceiling(number)", ["(${1:number})", "(${1:numeric number})"]],
    "cfusion_Decrypt": ["cfusion_Decrypt(string, key)", ["(${1:string}, ${2:key})", "(${1:string string}, ${2:string key})"]],
    "cfusion_Encrypt": ["cfusion_Encrypt(string, key)", ["(${1:string}, ${2:key})", "(${1:string string}, ${2:string key})"]],
    "charsetDecode": ["charsetDecode(string, encoding)", ["(${1:string}, ${2:encoding})", "(${1:string string}, ${2:string encoding})"]],
    "charsetEncode": ["charsetEncode(binaryData, encoding)", ["(${1:binaryData}, ${2:encoding})", "(${1:binary binaryData}, ${2:string encoding})"]],
    "chr": ["chr(number)", ["(${1:number})", "(${1:numeric number})"]],
    "cJustify": ["cJustify(string, length)", ["(${1:string}, ${2:length})", "(${1:string string}, ${2:numeric length})"]],
    "collectionEach": ["collectionEach(collection, closure)", ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure})"]],
    "collectionEvery": ["collectionEvery(collection, closure [, parallel] [, maxThreads])", ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "collectionFilter": ["collectionFilter(collection, filter [, parallel] [, maxThreads])", ["(${1:collection}, ${2:filter})", "(${1:any collection}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "collectionMap": ["collectionMap(collection, closure [, parallel] [, maxThreads])", ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "collectionReduce": ["collectionReduce(collection, closure [, initalValue])", ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:any initalValue}})"]],
    "collectionSome": ["collectionSome(collection, closure [, parallel] [, maxThreads])", ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "compare": ["compare(string1, string2)", ["(${1:string1}, ${2:string2})", "(${1:string string1}, ${2:string string2})"]],
    "compareNoCase": ["compareNoCase(string1, string2)", ["(${1:string1}, ${2:string2})", "(${1:string string1}, ${2:string string2})"]],
    "componentCacheClear": ["componentCacheClear()", ["()", "()"]],
    "componentCacheList": ["componentCacheList()", ["()", "()"]],
    "componentInfo": ["componentInfo(component)", ["(${1:component})", "(${1:component component})"]],
    "compress": ["compress(format, source, target [, includeBaseFolder] [, mode])", ["(${1:format}, ${2:source}, ${3:target})", "(${1:string format}, ${2:string source}, ${3:string target}${4:, ${5:boolean includeBaseFolder}}${6:, ${7:string mode}})"]],
    "contractPath": ["contractPath(path [, placeholder])", ["(${1:path_absolute})", "(${1:string path_absolute}${2:, ${3:boolean placeholder}})"]],
    "cos": ["cos(number)", ["(${1:number})", "(${1:numeric number})"]],
    "createDate": ["createDate(year, month, day)", ["(${1:year}, ${2:month}, ${3:day})", "(${1:numeric year}, ${2:numeric month}, ${3:numeric day})"]],
    "createDateTime": ["createDateTime(year, month, day, hour, minute, second)", ["(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second})", "(${1:numeric year}, ${2:numeric month}, ${3:numeric day}, ${4:numeric hour}, ${5:numeric minute}, ${6:numeric second}${7:, ${8:numeric millisecond}}${9:, ${10:numeric timezone}})"]],
    "createDynamicProxy": ["createDynamicProxy(cfc, interfaces)", ["(${1:cfc}, ${2:interfaces})", "(${1:any cfc}, ${2:array interfaces})"]],
    "createGUID": ["createGUID()", ["()", "()"]],
    "createObject": ["createObject(type, className)", ["(${1:type}, ${2:className}, ${3:context}, ${4:locale}, ${5:servername}, ${6:component_name}, ${7:urltowsdl})", "(${1:string type}, ${2:string className}, ${3:string context}, ${4:string locale}, ${5:string servername}, ${6:string component_name}, ${7:string urltowsdl}${8:, ${9:string portname}}${10:, ${11:string bundleName}}${12:, ${13:string bundleVersion}})"]],
    "createODBCDate": ["createODBCDate(date)", ["(${1:date})", "(${1:date date})"]],
    "createODBCDateTime": ["createODBCDateTime(date)", ["(${1:date})", "(${1:date date})"]],
    "createODBCTime": ["createODBCTime(date)", ["(${1:date})", "(${1:date date})"]],
    "createTime": ["createTime(hour, minute, second)", ["(${1:hour}, ${2:minute}, ${3:second})", "(${1:numeric hour}, ${2:numeric minute}, ${3:numeric second}${4:, ${5:numeric millisecond}}${6:, ${7:numeric timezone}})"]],
    "createTimespan": ["createTimespan(days, hours, minutes, seconds)", ["(${1:days}, ${2:hours}, ${3:minutes}, ${4:seconds})", "(${1:numeric days}, ${2:numeric hours}, ${3:numeric minutes}, ${4:numeric seconds})"]],
    "createUniqueID": ["createUniqueID()", ["()", "()"]],
    "createUUID": ["createUUID()", ["()", "()"]],
    "csrfGenerateToken": ["csrfGenerateToken( [key] [,forceNew] )", ["(${1:key})", "(${1:string key}${2:, ${3:boolean forceNew}})"]],
    "csrfVerifyToken": ["csrfVerifyToken( token [,key] )", ["(${1:token})", "(${1:string token}${2:, ${3:string key}})"]],
    "ctCacheClear": ["ctCacheClear()", ["()", "()"]],
    "ctCacheList": ["ctCacheList()", ["()", "()"]],
    "datasourceFlushMetacache": ["datasourceFlushMetacache([datasourceName])", ["(${1:datasourceName})", "(${1:string datasourceName})"]],
    "dateAdd": ["dateAdd(datepart, number, date)", ["(${1:datepart}, ${2:number}, ${3:date})", "(${1:string datepart}, ${2:numeric number}, ${3:date date})"]],
    "dateCompare": ["dateCompare(date1, date2 [, datePart])", ["(${1:date1}, ${2:date2})", "(${1:date date1}, ${2:date date2}${3:, ${4:string datePart}})"]],
    "dateConvert": ["dateConvert(conversionType, date)", ["(${1:conversionType}, ${2:date})", "(${1:string conversionType}, ${2:date date})"]],
    "dateDiff": ["dateDiff(datepart, date1, date2)", ["(${1:datepart}, ${2:date1}, ${3:date2})", "(${1:string datepart}, ${2:date date1}, ${3:date date2})"]],
    "dateFormat": ["dateFormat(date [, mask])", ["(${1:date})", "(${1:date date}${2:, ${3:string mask}})"]],
    "datePart": ["datePart(datepart, date [,timezone])", ["(${1:datepart}, ${2:date})", "(${1:string datepart}, ${2:date date}${3:, ${4:timezone timezone}})"]],
    "dateTimeFormat": ["dateTimeFormat(date [, mask [, timezone]])", ["(${1:date})", "(${1:date date}${2:, ${3:string mask}}${4:, ${5:string timezone}})"]],
    "day": ["day(date)", ["(${1:date})", "(${1:date date})"]],
    "dayOfWeek": ["dayOfWeek(date)", ["(${1:date})", "(${1:date date}${2:, ${3:string calendar}})"]],
    "dayOfWeekAsString": ["dayOfWeekAsString(dayOfWeek [, locale])", ["(${1:dayOfWeek})", "(${1:numeric dayOfWeek}${2:, ${3:locale locale}})"]],
    "dayOfWeekShortAsString": ["dayOfWeekShortAsString(day_of_week [, locale])", ["(${1:day_of_week})", "(${1:numeric day_of_week}${2:, ${3:string locale}})"]],
    "dayOfYear": ["dayOfYear(date)", ["(${1:date})", "(${1:date date})"]],
    "daysInMonth": ["daysInMonth(date)", ["(${1:date})", "(${1:date date})"]],
    "daysInYear": ["daysInYear(date)", ["(${1:date})", "(${1:date date})"]],
    "de": ["de(String)", ["(${1:String})", "(${1:string String})"]],
    "decimalFormat": ["decimalFormat(number)", ["(${1:number})", "(${1:numeric number})"]],
    "decodeForHTML": ["decodeForHTML(string);", ["(${1:string})", "(${1: string})"]],
    "decodeFromURL": ["decodeFromURL(string);", ["(${1:string})", "(${1: string})"]],
    "decrementValue": ["decrementValue(number)", ["(${1:number})", "(${1:numeric number})"]],
    "decrypt": ["decrypt(string, key [, algorithm [, encoding] [, iv | salt [, iterations]]])", ["(${1:string}, ${2:key})", "(${1:string string}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:binary iv}}${9:, ${10:binary salt}}${11:, ${12:numeric iterations}})"]],
    "decryptBinary": ["decryptBinary(binaryData, key [, algorithm [, encoding] [, iv | salt [, iterations]]])", ["(${1:binaryData}, ${2:key})", "(${1:string binaryData}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:binary iv}}${9:, ${10:binary salt}}${11:, ${12:numeric iterations}})"]],
    "deleteClientVariable": ["deleteClientVariable(name)", ["(${1:name})", "(${1:string name})"]],
    "deserialize": ["deserialize(string, type, useCustomSerializer);", ["(${1:string}, ${2:type}, ${3:useCustomSerializer})", "(${1:string string}, ${2:string type}, ${3:boolean useCustomSerializer})"]],
    "deserializeJSON": ["deserializeJSON(json [, strictMapping, useCustomSerializer])", ["(${1:json})", "(${1:string json}${2:, ${3:boolean strictMapping}}${4:, ${5:boolean useCustomSerializer}})"]],
    "deserializeXML": ["deserializeXML(string [,useCustomSerializer]);", ["(${1:string}, ${2:useCustomSerializer})", "(${1:string string}, ${2:boolean useCustomSerializer})"]],
    "directoryCopy": ["directoryCopy(source, destination [, recurse][, filter])", ["(${1:source}, ${2:destination})", "(${1:string source}, ${2:string destination}${3:, ${4:boolean recurse}}${5:, ${6:any filter}}${7:, ${8:boolean createPath}})"]],
    "directoryCreate": ["directoryCreate(path)", ["(${1:path})", "(${1:string path}${2:, ${3:boolean createPath}}${4:, ${5:boolean ignoreExists}})"]],
    "directoryDelete": ["directoryDelete(path[, recurse])", ["(${1:path})", "(${1:string path}${2:, ${3:boolean recurse}})"]],
    "directoryExists": ["directoryExists(path)", ["(${1:path})", "(${1:string path}${2:, ${3:boolean allowRealPath }})"]],
    "directoryList": ["directoryList(path [, recurse] [, listInfo] [, filter] [, sort] [, type])", ["(${1:path})", "(${1:string path}${2:, ${3:boolean recurse}}${4:, ${5:string listInfo}}${6:, ${7:string filter}}${8:, ${9:string sort}}${10:, ${11:string type}})"]],
    "directoryRename": ["directoryRename(oldPath, newPath)", ["(${1:oldPath}, ${2:newPath})", "(${1:string oldPath}, ${2:string newPath}${3:, ${4:boolean createPath}})"]],
    "dollarFormat": ["dollarFormat(number)", ["(${1:number})", "(${1:numeric number})"]],
    "dotnetToCFType": ["dotnetToCFType(variableName)", ["(${1:variableName})", "(${1:any variableName})"]],
    "duplicate": ["duplicate(object)", ["(${1:object})", "(${1:any object}${2:, ${3:boolean deepcopy}})"]],
    "each": ["each(collection, closure [, parallel] [, maxThreads])", ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "echo": ["echo(string)", ["(${1:string})", "(${1:string string})"]],
    "empty": ["empty(variable)", ["(${1:variable})", "(${1:any variable})"]],
    "encodeFor": ["encodeFor(type, value)", ["(${1:type}, ${2:value})", "(${1:string type}, ${2:string value})"]],
    "encodeForCSS": ["encodeForCSS(string [,canonicalize]);", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encodeForDN": ["encodeForDN( string [,canonicalize]);", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encodeForHTML": ["encodeForHTML(string [, canonicalize])", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encodeForHTMLAttribute": ["encodeForHTMLAttribute(string [, canonicalize])", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encodeForJavaScript": ["encodeForJavaScript(string [, canonicalize])", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}}${4:, ${5:boolean canonicalize}})"]],
    "encodeForLDAP": ["encodeForLDAP(string [,canonicalize]);", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encodeForURL": ["encodeForURL(string [,canonicalize]);", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encodeForXML": ["encodeForXML(string , [canonicalize]);", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encodeForXMLAttribute": ["encodeForXMLAttribute(string [,canonicalize]);", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encodeForXPath": ["encodeForXPath(string [,canonicalize]);", ["(${1:string})", "(${1:string string}${2:, ${3:boolean canonicalize}})"]],
    "encrypt": ["encrypt(string, key [, algorithm [, encoding] [, iv | salt [, iterations]]])", ["(${1:string}, ${2:key})", "(${1:string string}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:binary iv}}${9:, ${10:binary salt}}${11:, ${12:numeric iterations}})"]],
    "encryptBinary": ["encryptBinary(binaryData, key [, algorithm [, encoding] [, iv | salt [, iterations]]])", ["(${1:binaryData}, ${2:key})", "(${1:any binaryData}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:binary iv}}${7:, ${8:binary salt}}${9:, ${10:numeric iterations}})"]],
    "entityDelete": ["entityDelete(entity)", ["(${1:entity})", "(${1:variablename entity})"]],
    "entityLoad": ["entityLoad(entityName [,id | Filter ,unique | Order ,options])", ["(${1:entityName})", "(${1:string entityName}${2:, ${3:any id}}${4:, ${5:any Filter}}${6:, ${7:boolean unique}}${8:, ${9:string Order}}${10:, ${11:struct options}})"]],
    "entityLoadByExample": ["entityLoadByExample(sampleEntity [, unique, matchCriteria])", ["(${1:sampleEntity})", "(${1:string sampleEntity}${2:, ${3:boolean unique}}${4:, ${5:any matchCriteria}})"]],
    "entityLoadByPK": ["entityLoadByPK(entity, id)", ["(${1:entity}, ${2:id})", "(${1:string entity}, ${2:string id}${3:, ${4:boolean unique}})"]],
    "entityMerge": ["entityMerge(entity)", ["(${1:entity})", "(${1:variablename entity})"]],
    "entityNameArray": ["entityNameArray()", ["()", "()"]],
    "entityNameList": ["entityNameList([delimiter])", ["(${1:delimiter})", "(${1:string delimiter})"]],
    "entityNew": ["entityNew(entityName [,properties [,ignoreExtras]])", ["(${1:entityName})", "(${1:string entityName}${2:, ${3:struct properties}}${4:, ${5:boolean ignoreExtras}})"]],
    "entityReload": ["entityReload(entity)", ["(${1:entity})", "(${1:variablename entity})"]],
    "entitySave": ["entitySave(entity [, forceInsert])", ["(${1:entity})", "(${1:variablename entity}${2:, ${3:boolean forceInsert}})"]],
    "entityToQuery": ["entityToQuery(entity [, name])", ["(${1:entity})", "(${1:variablename entity}${2:, ${3:string name}})"]],
    "esapiDecode": ["esapiDecode(decodeFrom, string)", ["(${1:decodeFrom}, ${2:string})", "(${1:string decodeFrom}, ${2:string string})"]],
    "esapiEncode": ["esapiEncode(encodeFor,string)", ["(${1:encodeFor}, ${2:string})", "(${1:string encodeFor}, ${2:string string})"]],
    "evaluate": ["evaluate(expression)", ["(${1:expression})", "(${1:string expression})"]],
    "exp": ["exp(number)", ["(${1:number})", "(${1:numeric number})"]],
    "expandPath": ["expandPath(path)", ["(${1:path})", "(${1:string path})"]],
    "extract": ["extract(format, source, target)", ["(${1:format}, ${2:source}, ${3:target})", "(${1:string format}, ${2:string source}, ${3:string target})"]],
    "fileAppend": ["fileAppend(filePath, data [, charset])", ["(${1:filePath}, ${2:data})", "(${1:string filePath}, ${2:string data}${3:, ${4:string charset}}${5:, ${6:boolean addNewLine}})"]],
    "fileClose": ["fileClose(file)", ["(${1:file})", "(${1:any file})"]],
    "fileCopy": ["fileCopy(source, destination)", ["(${1:source}, ${2:destination})", "(${1:string source}, ${2:string destination})"]],
    "fileDelete": ["fileDelete(filePath)", ["(${1:filePath})", "(${1:string filePath})"]],
    "fileExists": ["fileExists(filePath)", ["(${1:filePath})", "(${1:string filePath})"]],
    "fileGetMimeType": ["fileGetMimeType(file, strict)", ["(${1:file})", "(${1:any file}${2:, ${3:boolean strict}})"]],
    "fileIsEOF": ["fileIsEOF(file)", ["(${1:file})", "(${1:any file})"]],
    "fileMove": ["fileMove(source, destination)", ["(${1:source}, ${2:destination})", "(${1:string source}, ${2:string destination})"]],
    "fileOpen": ["fileOpen(filePath [, mode [, charset] [, seekable]])", ["(${1:filePath})", "(${1:string filePath}${2:, ${3:string mode}}${4:, ${5:string charset}}${6:, ${7:boolean seekable}})"]],
    "fileRead": ["fileRead(filePath [, charset | bufferSize])", ["(${1:filePath})", "(${1:any filePath}${2:, ${3:any charset}}${4:, ${5:any bufferSize}})"]],
    "fileReadBinary": ["fileReadBinary(filePath)", ["(${1:filePath})", "(${1:string filePath})"]],
    "fileReadLine": ["fileReadLine(file)", ["(${1:file})", "(${1:any file})"]],
    "fileSeek": ["fileSeek(file, position)", ["(${1:file}, ${2:position})", "(${1:any file}, ${2:numeric position})"]],
    "fileSetAccessMode": ["fileSetAccessMode(filePath, mode)", ["(${1:filePath}, ${2:mode})", "(${1:string filePath}, ${2:string mode})"]],
    "fileSetAttribute": ["fileSetAttribute(filePath, attribute)", ["(${1:filePath}, ${2:attribute})", "(${1:string filePath}, ${2:string attribute})"]],
    "fileSetLastModified": ["fileSetLastModified(filePath, date)", ["(${1:filePath}, ${2:date})", "(${1:string filePath}, ${2:date date})"]],
    "fileSkipBytes": ["fileSkipBytes(file, skipCount)", ["(${1:file}, ${2:skipCount})", "(${1:any file}, ${2:numeric skipCount})"]],
    "fileUpload": ["fileUpload(destination [, fileField] [, mimeType] [, onConflict] [, strict])", ["(${1:destination})", "(${1:string destination}${2:, ${3:string fileField}}${4:, ${5:string mimeType}}${6:, ${7:string onConflict}}${8:, ${9:boolean strict}})"]],
    "fileUploadAll": ["fileUploadAll(destination [,mimeType [,strict]] [,onConflict] [,continueOnError [,errorVariable]])", ["(${1:destination})", "(${1:string destination}${2:, ${3:string mimeType}}${4:, ${5:string onConflict}}${6:, ${7:boolean strict}}${8:, ${9:boolean continueOnError}}${10:, ${11:variablename errorVariable}})"]],
    "fileWrite": ["fileWrite(filePath, data [, charset])", ["(${1:filePath}, ${2:data})", "(${1:any filePath}, ${2:any data}${3:, ${4:string charset}})"]],
    "fileWriteLine": ["fileWriteLine(file, data)", ["(${1:file}, ${2:data})", "(${1:any file}, ${2:string data})"]],
    "find": ["find(substring, string [, start])", ["(${1:substring}, ${2:string})", "(${1:string substring}, ${2:string string}${3:, ${4:numeric start}})"]],
    "findNoCase": ["findNoCase(substring, string [, start])", ["(${1:substring}, ${2:string})", "(${1:string substring}, ${2:string string}${3:, ${4:numeric start}})"]],
    "findOneOf": ["findOneOf(set, string [, start])", ["(${1:set}, ${2:string})", "(${1:string set}, ${2:string string}${3:, ${4:numeric start}})"]],
    "firstDayOfMonth": ["firstDayOfMonth(date)", ["(${1:date})", "(${1:date date})"]],
    "fix": ["fix(number)", ["(${1:number})", "(${1:numeric number})"]],
    "floor": ["floor(number)", ["(${1:number})", "(${1:numeric number})"]],
    "formatBaseN": ["formatBaseN(number, radix)", ["(${1:number}, ${2:radix})", "(${1:numeric number}, ${2:numeric radix})"]],
    "generatePBKDFKey": ["generatePBKDFKey(algorithm, passphrase, salt, iterations, keySize);", ["(${1:algorithm}, ${2:passphrase}, ${3:salt}, ${4:iterations}, ${5:keySize})", "(${1:string algorithm}, ${2:string passphrase}, ${3:string salt}, ${4:numeric iterations}, ${5:numeric keySize})"]],
    "generateSecretKey": ["generateSecretKey([algorithm] [,keysize])", ["(${1:algorithm})", "(${1:string algorithm}${2:, ${3:numeric keysize}})"]],
    "getApplicationMetadata": ["getApplicationMetadata()", ["()", "()"]],
    "getApplicationSettings": ["getApplicationSettings()", ["(${1:suppressFunction})", "(${1:boolean suppressFunction})"]],
    "getAuthUser": ["getAuthUser()", ["()", "()"]],
    "getBaseTagData": ["getBaseTagData(tagname [, instancenumber])", ["(${1:tagname})", "(${1:string tagname}${2:, ${3:numeric instancenumber}})"]],
    "getBaseTagList": ["getBaseTagList()", ["(${1:delimiter})", "(${1:string delimiter})"]],
    "getBaseTemplatePath": ["getBaseTemplatePath()", ["()", "()"]],
    "getBuiltinFunction": ["getBuiltinFunction(name)", ["(${1:name})", "(${1:string name})"]],
    "getCanonicalPath": ["getCanonicalPath(path)", ["(${1:path})", "(${1:string path})"]],
    "getClassPath": ["getClassPath()", ["()", "()"]],
    "getClientVariablesList": ["getClientVariablesList()", ["()", "()"]],
    "getComponentMetadata": ["getComponentMetadata(path)", ["(${1:path})", "(${1:string path})"]],
    "getContextRoot": ["getContextRoot()", ["()", "()"]],
    "getCpuUsage": ["getCpuUsage([interval]);", ["(${1:interval})", "(${1:numeric interval})"]],
    "getCurrentContext": ["getCurrentContext()", ["()", "()"]],
    "getCurrentTemplatePath": ["getCurrentTemplatePath()", ["()", "()"]],
    "getDirectoryFromPath": ["getDirectoryFromPath(path)", ["(${1:path})", "(${1:string path})"]],
    "getEncoding": ["getEncoding(scope_name)", ["(${1:scope_name})", "(${1:string scope_name})"]],
    "getException": ["getException(javaobject)", ["(${1:javaobject})", "(${1:any javaobject})"]],
    "getFileFromPath": ["getFileFromPath(path)", ["(${1:path})", "(${1:string path})"]],
    "getFileInfo": ["getFileInfo(path)", ["(${1:path})", "(${1:string path})"]],
    "getFreeSpace": ["getFreeSpace(path);", ["(${1:path})", "(${1: path})"]],
    "getFunctionCalledName": ["getFunctionCalledName()", ["()", "()"]],
    "getFunctionData": ["getFunctionData(functionName)", ["(${1:functionName})", "(${1:string functionName}${2:, ${3:string dialect}})"]],
    "getFunctionKeywords": ["getFunctionKeywords()", ["()", "()"]],
    "getFunctionList": ["getFunctionList()", ["()", "()"]],
    "getGatewayHelper": ["getGatewayHelper(gatewayID)", ["(${1:gatewayID})", "(${1:string gatewayID})"]],
    "getHTTPRequestData": ["getHTTPRequestData()", ["(${1:includeBody})", "(${1:boolean includeBody})"]],
    "getHTTPTimeString": ["getHTTPTimeString(DateTime)", ["(${1:DateTime})", "(${1:date DateTime})"]],
    "getK2ServerDocCount": ["getK2ServerDocCount()", ["()", "()"]],
    "getK2ServerDocCountLimit": ["getK2ServerDocCountLimit()", ["()", "()"]],
    "getLocale": ["getLocale()", ["()", "()"]],
    "getLocaleCountry": ["getLocaleCountry()", ["()", "()"]],
    "getLocaleDisplayName": ["getLocaleDisplayName()", ["()", "()"]],
    "getLocaleInfo": ["getLocaleInfo()", ["(${1:locale})", "(${1:string locale}${2:, ${3:string dspLocale}})"]],
    "getLocaleLanguage": ["getLocaleLanguage()", ["()", "()"]],
    "getLocalhostIP": ["getLocalhostIP()", ["()", "()"]],
    "getLuceeID": ["getLuceeID()", ["()", "()"]],
    "getMemoryUsage": ["getMemoryUsage([type])", ["(${1:type})", "(${1:string type})"]],
    "getMetadata": ["getMetadata(Object)", ["(${1:Object})", "(${1:any Object})"]],
    "getMetricData": ["getMetricData(mode)", ["(${1:mode})", "(${1:string mode})"]],
    "getNumericDate": ["getNumericDate(arg1)", ["(${1:arg1})", "(${1:any arg1})"]],
    "getPageContext": ["getPageContext()", ["()", "()"]],
    "getPrinterInfo": ["getPrinterInfo([printer])", ["(${1:printer})", "(${1:string printer})"]],
    "getPrinterList": ["getPrinterList([delimiter])", ["(${1:delimiter})", "(${1:string delimiter})"]],
    "getProfileSections": ["getProfileSections(inifile)", ["(${1:inifile})", "(${1:string inifile})"]],
    "getProfileString": ["getProfileString(inipath, section, entry)", ["(${1:inipath}, ${2:section}, ${3:entry})", "(${1:string inipath}, ${2:string section}, ${3:string entry})"]],
    "getReadableImageFormats": ["getReadableImageFormats()", ["()", "()"]],
    "getSafeHTML": ["getSafeHTML(inputString [, PolicyFile, throwOnError])", ["(${1:inputString}, ${2:PolicyFile}, ${3:throwOnError})", "(${1:string inputString}, ${2:string PolicyFile}, ${3:boolean throwOnError})"]],
    "getSOAPRequest": ["getSOAPRequest(webservice)", ["(${1:webservice})", "(${1:any webservice})"]],
    "getSOAPRequestHeader": ["getSOAPRequestHeader(namespace, name [, asXML])", ["(${1:namespace}, ${2:name})", "(${1:string namespace}, ${2:string name}${3:, ${4:boolean asXML}})"]],
    "getSOAPResponse": ["getSOAPResponse(webservice)", ["(${1:webservice})", "(${1:any webservice})"]],
    "getSOAPResponseHeader": ["getSOAPResponseHeader(webservice, namespace, name [, asXML])", ["(${1:webservice}, ${2:namespace}, ${3:name})", "(${1:any webservice}, ${2:string namespace}, ${3:string name}${4:, ${5:boolean asXML}})"]],
    "getSystemFreeMemory": ["getSystemFreeMemory();", ["()", "()"]],
    "getSystemTotalMemory": ["getSystemTotalMemory();", ["(${1:region})", "(${1: region})"]],
    "getTagData": ["getTagData(nameSpaceWithSeperator, tagName)", ["(${1:nameSpaceWithSeperator}, ${2:tagName})", "(${1:string nameSpaceWithSeperator}, ${2:string tagName}${3:, ${4:string dialect}})"]],
    "getTagList": ["getTagList()", ["()", "()"]],
    "getTempDirectory": ["getTempDirectory()", ["()", "()"]],
    "getTempFile": ["getTempFile(dir, prefix)", ["(${1:dir}, ${2:prefix})", "(${1:string dir}, ${2:string prefix})"]],
    "getTemplatePath": ["getTemplatePath()", ["()", "()"]],
    "getTickCount": ["getTickCount()", ["()", "()"]],
    "getTimezone": ["getTimezone()", ["()", "()"]],
    "getTimezoneInfo": ["getTimezoneInfo(text)", ["(${1:timezone}, ${2:locale})", "(${1:string timezone}, ${2:string locale})"]],
    "getToken": ["getToken(string, index [, delimiters])", ["(${1:String}, ${2:index})", "(${1:string String}, ${2:numeric index}${3:, ${4:string delimiters}})"]],
    "getTotalSpace": ["getTotalSpace(path);", ["(${1:path})", "(${1: path})"]],
    "getUserRoles": ["getUserRoles()", ["()", "()"]],
    "getVariable": ["getVariable(name)", ["(${1:name})", "(${1:string name})"]],
    "getVFSMetadata": ["getVFSMetadata(fileSystemType)", ["(${1:fileSystemType})", "(${1:string fileSystemType})"]],
    "getWriteableImageFormats": ["getWriteableImageFormats()", ["()", "()"]],
    "hash": ["hash(string [, algorithm [, encoding]] [, additionalIterations])", ["(${1:string})", "(${1:string string}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:numeric additionalIterations}})"]],
    "hash40": ["hash40(input [, algorithm] [, encoding] [, numIterations])", ["(${1:input})", "(${1:any input}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:numeric numIterations}})"]],
    "hmac": ["hmac(message, key [, algorithm] [, encoding] )", ["(${1:message}, ${2:key})", "(${1:any message}, ${2:any key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}})"]],
    "hour": ["hour(date)", ["(${1:date})", "(${1:date date})"]],
    "htmlCodeFormat": ["htmlCodeFormat(string [, version])", ["(${1:string})", "(${1:string string}${2:, ${3:numeric version}})"]],
    "htmlEditFormat": ["htmlEditFormat( string [, version] )", ["(${1:string})", "(${1:string string}${2:, ${3:numeric version}})"]],
    "htmlParse": ["htmlParse(html [, caseSensitive])", ["(${1:html})", "(${1:string html}${2:, ${3:boolean caseSensitive}})"]],
    "iIf": ["iIf(condition, expression1, expression2)", ["(${1:condition}, ${2:expression1}, ${3:expression2})", "(${1:boolean condition}, ${2:string expression1}, ${3:string expression2})"]],
    "imageAddBorder": ["imageAddBorder(name, thickness [, color] [, bordertype])", ["(${1:name}, ${2:thickness})", "(${1:string name}, ${2:string thickness}${3:, ${4:string color}}${5:, ${6:string bordertype}})"]],
    "imageBlur": ["imageBlur(name [, blurradius])", ["(${1:name})", "(${1:string name}${2:, ${3:numeric blurradius}})"]],
    "imageClearRect": ["imageClearRect(name, x, y, width, height)", ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height})"]],
    "imageCopy": ["imageCopy(name, x, y, width, height [, dx] [, dy])", ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:numeric dx}}${8:, ${9:numeric dy}})"]],
    "imageCreateCaptcha": ["imageCreateCaptcha (height, width, text [, difficulty, fonts, fontsize)", ["(${1:height}, ${2:width}, ${3:text})", "(${1: height}, ${2: width}, ${3: text}${4:, ${5: difficulty}}${6:, ${7: font}}${8:, ${9: fontsize}})"]],
    "imageCrop": ["imageCrop(name, x, y, width, height)", ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height})"]],
    "imageDrawArc": ["imageDrawArc(name, x, y, width, height, startAngle, archAngle [, filled])", ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:startAngle}, ${7:archAngle})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:numeric startAngle}, ${7:numeric archAngle}${8:, ${9:boolean filled}})"]],
    "imageDrawBeveledRect": ["imageDrawBeveledRect(name, x, y, width, height, raised [, filled])", ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:raised})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:boolean raised}${7:, ${8:boolean filled}})"]],
    "imageDrawCubicCurve": ["imageDrawCubicCurve(name, ctrlx1, ctrly1, ctrlx2, ctrly2, x1, y1, x2, y2)", ["(${1:name}, ${2:ctrlx1}, ${3:ctrly1}, ${4:ctrlx2}, ${5:ctrly2}, ${6:x1}, ${7:y1}, ${8:x2}, ${9:y2})", "(${1: name}, ${2:string ctrlx1}, ${3:numeric ctrly1}, ${4:numeric ctrlx2}, ${5:numeric ctrly2}, ${6:numeric x1}, ${7:numeric y1}, ${8:numeric x2}, ${9:numeric y2})"]],
    "imageDrawImage": ["imageDrawImage(name, image, x, y)", ["(${1:name}, ${2:image}, ${3:x}, ${4:y})", "(${1:any name}, ${2:any image}, ${3:numeric x}, ${4:numeric y})"]],
    "imageDrawLine": ["imageDrawLine(name, x1, y1, x2, y2)", ["(${1:name}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})", "(${1:string name}, ${2:numeric x1}, ${3:numeric y1}, ${4:numeric x2}, ${5:numeric y2})"]],
    "imageDrawLines": ["imageDrawLines(name, xcords, ycords [, isPolygon] [, filled])", ["(${1:name}, ${2:xcords}, ${3:ycords})", "(${1:string name}, ${2:numeric xcords}, ${3:numeric ycords}${4:, ${5:boolean isPolygon}}${6:, ${7:boolean filled}})"]],
    "imageDrawOval": ["imageDrawOval(name, x, y, width, height [, filled])", ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:boolean filled}})"]],
    "imageDrawPoint": ["imageDrawPoint(name, x, y)", ["(${1:name}, ${2:x}, ${3:y})", "(${1:string name}, ${2:numeric x}, ${3:numeric y})"]],
    "imageDrawQuadraticCurve": ["imageDrawQuadraticCurve(name, ctrlx1, ctrly1, x1, y1, x2, y2)", ["(${1:name}, ${2:x1}, ${3:y1}, ${4:ctrlx1}, ${5:ctrly1}, ${6:x2}, ${7:y2})", "(${1: name}, ${2:numeric x1}, ${3:numeric y1}, ${4:string ctrlx1}, ${5:numeric ctrly1}, ${6:numeric x2}, ${7:numeric y2})"]],
    "imageDrawRect": ["imageDrawRect(name, x, y, width, height [, filled])", ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:boolean filled}})"]],
    "imageDrawRoundRect": ["imageDrawRoundRect(name, x, y, width, height, arcwidth, archeight [, filled])", ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:arcwidth}, ${7:archeight})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:numeric arcwidth}, ${7:numeric archeight}${8:, ${9:boolean filled}})"]],
    "imageDrawText": ["imageDrawText(name, str, x, y, attributecollection)", ["(${1:name}, ${2:str}, ${3:x}, ${4:y})", "(${1:string name}, ${2:string str}, ${3:numeric x}, ${4:numeric y}${5:, ${6:struct attributecollection}})"]],
    "imageFilter": ["imageFilter(name, filtername [, parameters])", ["(${1:name}, ${2:filtername})", "(${1:any name}, ${2:string filtername}${3:, ${4:struct parameters}})"]],
    "imageFilterColorMap": ["imageFilterColorMap(type [, lineColor1] [, lineColor2])", ["(${1:type})", "(${1:string type}${2:, ${3:string lineColor1}}${4:, ${5:string lineColor2}})"]],
    "imageFilterCurves": ["imageFilterCurves()", ["()", "()"]],
    "imageFilterKernel": ["imageFilterKernel(width, height, data)", ["(${1:width}, ${2:height}, ${3:data})", "(${1:numeric width}, ${2:numeric height}, ${3:any data})"]],
    "imageFilterWarpGrid": ["imageFilterWarpGrid(rows, cols, width, height)", ["(${1:rows}, ${2:cols}, ${3:width}, ${4:height})", "(${1:numeric rows}, ${2:numeric cols}, ${3:numeric width}, ${4:numeric height})"]],
    "imageFlip": ["imageFlip(name, transpose)", ["(${1:name}, ${2:transpose})", "(${1:string name}, ${2:string transpose})"]],
    "imageFonts": ["imageFonts()", ["()", "()"]],
    "imageFormats": ["imageFormats()", ["()", "()"]],
    "imageGetBlob": ["imageGetBlob(source)", ["(${1:source})", "(${1:string source})"]],
    "imageGetBufferedImage": ["imageGetBufferedImage(name)", ["(${1:name})", "(${1:string name})"]],
    "imageGetExifMetadata": ["imageGetExifMetadata(name)", ["(${1:name})", "(${1:string name})"]],
    "imageGetEXIFTag": ["imageGetEXIFTag(name, tagName)", ["(${1:name}, ${2:tagName})", "(${1:string name}, ${2:string tagName})"]],
    "imageGetHeight": ["imageGetHeight(name)", ["(${1:name})", "(${1:string name})"]],
    "imageGetIPTCMetadata": ["imageGetIPTCMetadata(name)", ["(${1:name})", "(${1:string name})"]],
    "imageGetIPTCtag": ["imageGetIPTCtag(name, tagName)", ["(${1:name}, ${2:tagName})", "(${1:string name}, ${2:string tagName})"]],
    "imageGetMetadata": ["imageGetMetadata(image)", ["(${1:name})", "(${1:string name})"]],
    "imageGetWidth": ["imageGetWidth(name)", ["(${1:name})", "(${1:string name})"]],
    "imageGrayScale": ["imageGrayScale(name)", ["(${1:name})", "(${1:string name})"]],
    "imageInfo": ["imageInfo(name)", ["(${1:name})", "(${1:string name})"]],
    "imageMakeColorTransparent": ["imageMakeColorTransparent(img, color__);", ["(${1:img}, ${2:color})", "(${1: img}, ${2: color})"]],
    "imageMakeTranslucent": ["imageMakeTranslucent (img, percent__);", ["(${1:img}, ${2:percentage})", "(${1: img}, ${2: percentage})"]],
    "imageNegative": ["imageNegative(name)", ["(${1:name})", "(${1:string name})"]],
    "imageNew": ["imageNew([source] [, width] [, height] [, imagetype] [, canvascolor])", ["(${1:source})", "(${1:string source}${2:, ${3:numeric width}}${4:, ${5:numeric height}}${6:, ${7:string imagetype}}${8:, ${9:string canvascolor}})"]],
    "imageOverlay": ["imageOverlay(source1, source2 [, rule, alpha])", ["(${1:source1}, ${2:source2})", "(${1:string source1}, ${2:string source2}${3:, ${4:string rule}}${5:, ${6:string alpha}})"]],
    "imagePaste": ["imagePaste(image1, image2, x, y)", ["(${1:image1}, ${2:image2}, ${3:x}, ${4:y})", "(${1:string image1}, ${2:string image2}, ${3:numeric x}, ${4:numeric y})"]],
    "imageRead": ["imageRead(path)", ["(${1:path})", "(${1:string path})"]],
    "imageReadBase64": ["imageReadBase64(string)", ["(${1:string})", "(${1:string string})"]],
    "imageResize": ["imageResize(name, width, height, interpolation, blurfactor)", ["(${1:name}, ${2:width}, ${3:height})", "(${1:string name}, ${2:numeric width}, ${3:numeric height}${4:, ${5:string interpolation}}${6:, ${7:boolean blurfactor}})"]],
    "imageRotate": ["imageRotate(name [, x] [, y] , angle [, interpolation])", ["(${1:name}, ${2:angle})", "(${1:string name}, ${2:numeric angle}${3:, ${4:numeric x}}${5:, ${6:numeric y}}${7:, ${8:string interpolation}})"]],
    "imageRotateDrawingAxis": ["imageRotateDrawingAxis(name, angle [, x] [, y])", ["(${1:name}, ${2:angle})", "(${1:string name}, ${2:numeric angle}${3:, ${4:numeric x}}${5:, ${6:numeric y}})"]],
    "imageScaleTofit": ["imageScaleTofit(name, fitWidth, fitHeight [, interpolation] [, blurFactor])", ["(${1:name}, ${2:fitWidth}, ${3:fitHeight})", "(${1:string name}, ${2:numeric fitWidth}, ${3:numeric fitHeight}${4:, ${5:string interpolation}}${6:, ${7:boolean blurfactor}})"]],
    "imageSetAntialiasing": ["imageSetAntialiasing(name [, antialias])", ["(${1:name})", "(${1:string name}${2:, ${3:boolean antialias}})"]],
    "imageSetBackgroundColor": ["imageSetBackgroundColor(name, color)", ["(${1:name}, ${2:color})", "(${1: name}, ${2: color})"]],
    "imageSetDrawingAlpha": ["imageSetDrawingAlpha(name, alpha)", ["(${1:name}, ${2:alpha})", "(${1:any name}, ${2:numeric alpha})"]],
    "imageSetDrawingColor": ["imageSetDrawingColor(name, color)", ["(${1:name}, ${2:color})", "(${1:string name}, ${2: color})"]],
    "imageSetDrawingStroke": ["imageSetDrawingStroke(name [, attributecollection])", ["(${1:name})", "(${1:string name}${2:, ${3:struct attributecollection}})"]],
    "imageSetDrawingTransparency": ["imageSetDrawingTransparency(name, percent)", ["(${1:name}, ${2:percent})", "(${1:string name}, ${2:numeric percent})"]],
    "imageSharpen": ["imageSharpen(name [, gain])", ["(${1:name})", "(${1:string name}${2:, ${3:numeric gain}})"]],
    "imageShear": ["imageShear(name, shear [, direction] [, interpolation])", ["(${1:name}, ${2:shear})", "(${1:string name}, ${2:numeric shear}${3:, ${4:string direction}}${5:, ${6:string interpolation}})"]],
    "imageShearDrawingAxis": ["imageShearDrawingAxis(name, shrx, shry)", ["(${1:name}, ${2:shrx}, ${3:shry})", "(${1:string name}, ${2:numeric shrx}, ${3:numeric shry})"]],
    "imageTranslate": ["imageTranslate(name, xTrans, yTrans [, interpolation])", ["(${1:name}, ${2:xTrans}, ${3:yTrans})", "(${1:string name}, ${2:numeric xTrans}, ${3:numeric yTrans}${4:, ${5:string interpolation}})"]],
    "imageTranslateDrawingAxis": ["imageTranslateDrawingAxis(name, x, y)", ["(${1:name}, ${2:x}, ${3:y})", "(${1: name}, ${2:numeric x}, ${3:numeric y})"]],
    "imageWrite": ["imageWrite(name [, destination] [, quality] [, overwrite])", ["(${1:name})", "(${1:string name}${2:, ${3:string destination}}${4:, ${5:string quality}}${6:, ${7:boolean overwrite}})"]],
    "imageWriteBase64": ["imageWriteBase64(name, destination, format [, inHTMLFormat] [, overwrite])", ["(${1:name}, ${2:destination}, ${3:format})", "(${1:string name}, ${2:string destination}, ${3:string format}${4:, ${5:boolean inHTMLFormat}}${6:, ${7:boolean overwrite}})"]],
    "imageXORDrawingMode": ["imageXORDrawingMode(name, c1)", ["(${1:name}, ${2:c1})", "(${1:string name}, ${2:string c1})"]],
    "incrementValue": ["incrementValue(number)", ["(${1:number})", "(${1:numeric number})"]],
    "inputBaseN": ["inputBaseN(String, radix)", ["(${1:String}, ${2:radix})", "(${1:string String}, ${2:string radix})"]],
    "insert": ["insert(substring, String, position)", ["(${1:substring}, ${2:String}, ${3:position})", "(${1:string substring}, ${2:string String}, ${3:numeric position})"]],
    "int": ["int(number)", ["(${1:number})", "(${1:numeric number})"]],
    "invalidateOauthAccesstoken": ["invalidateOauthAccesstoken(token,type);", ["(${1:token}, ${2:type})", "(${1: token}, ${2: type})"]],
    "invoke": ["invoke(instance, methodName [, arguments])", ["(${1:instance}, ${2:methodname})", "(${1:string instance}, ${2:string methodname}${3:, ${4:any arguments}})"]],
    "isArray": ["isArray(value [, number])", ["(${1:value})", "(${1:any value}${2:, ${3:numeric number}})"]],
    "isBinary": ["isBinary(value)", ["(${1:value})", "(${1:any value})"]],
    "isBoolean": ["isBoolean(value)", ["(${1:value})", "(${1:any value})"]],
    "isClosure": ["isClosure(object)", ["(${1:object})", "(${1:any object})"]],
    "isCustomFunction": ["isCustomFunction(Object)", ["(${1:Object})", "(${1:any Object})"]],
    "isDate": ["isDate(Object)", ["(${1:Object})", "(${1:any Object})"]],
    "isDDX": ["isDDX(path)", ["(${1:path})", "(${1:string path})"]],
    "isDebugMode": ["isDebugMode()", ["()", "()"]],
    "isDefined": ["isDefined(variable_name)", ["(${1:variable_name})", "(${1:string variable_name})"]],
    "isEmpty": ["isEmpty(value)", ["(${1:value})", "(${1:any value})"]],
    "isFileObject": ["isFileObject(object);", ["(${1:object})", "(${1: object})"]],
    "isImage": ["isImage(name)", ["(${1:name})", "(${1:string name})"]],
    "isImageFile": ["isImageFile(path)", ["(${1:path})", "(${1:string path})"]],
    "isInstanceOf": ["isInstanceOf(object, typename)", ["(${1:object}, ${2:typename})", "(${1:any object}, ${2:string typename})"]],
    "isIPInRange": ["isIPInRange(ips, ip)", ["(${1:ips}, ${2:ip})", "(${1:any ips}, ${2:string ip})"]],
    "isIPV6": ["isIPV6(IP)", ["(${1:IP})", "(${1:string IP})"]],
    "isJSON": ["isJSON(var)", ["(${1:var})", "(${1:string var})"]],
    "isK2ServerABroker": ["isK2ServerABroker()", ["()", "()"]],
    "isK2ServerDocCountExceeded": ["isK2ServerDocCountExceeded()", ["()", "()"]],
    "isK2ServerOnline": ["isK2ServerOnline()", ["()", "()"]],
    "isLeapYear": ["isLeapYear(year)", ["(${1:year})", "(${1:numeric year})"]],
    "isLocalhost": ["isLocalhost(ipaddress)", ["(${1:ipaddress})", "(${1:string ipaddress})"]],
    "isNotMap": ["isNotMap(obj)", ["(${1:obj})", "(${1:any obj})"]],
    "isNull": ["isNull(object)", ["(${1:object})", "(${1:variablename object})"]],
    "isNumeric": ["isNumeric(String)", ["(${1:String})", "(${1:string String})"]],
    "isNumericDate": ["isNumericDate(number)", ["(${1:number})", "(${1:numeric number})"]],
    "isObject": ["isObject(value)", ["(${1:value})", "(${1:any value})"]],
    "isPDFArchive": ["isPDFArchive(path, standard)", ["(${1:path}, ${2:standard})", "(${1:string path}, ${2:string standard})"]],
    "isPDFFile": ["isPDFFile(path)", ["(${1:path})", "(${1:string path})"]],
    "isPDFObject": ["isPDFObject(value)", ["(${1:value})", "(${1:variablename value})"]],
    "isQuery": ["isQuery(value)", ["(${1:value})", "(${1:string value})"]],
    "isSafeHTML": ["isSafeHTML(inputString [, PolicyFile])", ["(${1:inputString})", "(${1:string inputString}${2:, ${3:string PolicyFile}})"]],
    "isSimpleValue": ["isSimpleValue(value)", ["(${1:value})", "(${1:any value})"]],
    "isSOAPRequest": ["isSOAPRequest()", ["()", "()"]],
    "isSpreadsheetFile": ["isSpreadsheetFile(file)", ["(${1:file})", "(${1:string file})"]],
    "isSpreadsheetObject": ["isSpreadsheetObject(object)", ["(${1:object})", "(${1:variablename object})"]],
    "isStruct": ["isStruct(variable)", ["(${1:variable})", "(${1:any variable})"]],
    "isUserInAnyRole": ["isUserInAnyRole(roleList)", ["(${1:roleList})", "(${1:string roleList})"]],
    "isUserInRole": ["isUserInRole(role_name)", ["(${1:role_name})", "(${1:string role_name})"]],
    "isUserLoggedIn": ["isUserLoggedIn()", ["()", "()"]],
    "isValid": ["isValid(type, value, min, max, pattern)", ["(${1:type}, ${2:value}, ${3:min}, ${4:max}, ${5:pattern})", "(${1:string type}, ${2:any value}, ${3:numeric min}, ${4:numeric max}, ${5:string pattern})"]],
    "isValidOauthAccesstoken": ["isValidOauthAccesstoken(token,type);", ["(${1:token}, ${2:type})", "(${1: token}, ${2: type})"]],
    "isVideoFile": ["isVideoFile(path)", ["(${1:path})", "(${1:string path})"]],
    "isWDDX": ["isWDDX(value)", ["(${1:value})", "(${1:any value})"]],
    "isXML": ["isXML(value)", ["(${1:value})", "(${1:string value})"]],
    "isXMLAttribute": ["isXMLAttribute(value)", ["(${1:value})", "(${1:any value})"]],
    "isXMLDoc": ["isXMLDoc(value)", ["(${1:value})", "(${1:any value})"]],
    "isXMLElem": ["isXMLElem(value)", ["(${1:value})", "(${1:any value})"]],
    "isXMLNode": ["isXMLNode(value)", ["(${1:value})", "(${1:any value})"]],
    "isXMLRoot": ["isXMLRoot(value)", ["(${1:value})", "(${1:any value})"]],
    "isZipFile": ["isZipFile(path)", ["(${1:path})", "(${1:string path})"]],
    "javacast": ["javacast(type, variable)", ["(${1:type}, ${2:variable})", "(${1:string type}, ${2:string variable})"]],
    "jsStringFormat": ["jsStringFormat(String)", ["(${1:String})", "(${1:string String})"]],
    "lCase": ["lCase(String)", ["(${1:String})", "(${1:string String})"]],
    "left": ["left(String, count)", ["(${1:String}, ${2:count})", "(${1:string String}, ${2:numeric count})"]],
    "len": ["len(Object)", ["(${1:Object})", "(${1:any Object})"]],
    "listAppend": ["listAppend(list, value [, delimiters, includeEmptyFields])", ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}})"]],
    "listAvg": ["listAvg(list [, delimiters] [, multiCharacterDelimiter])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean multiCharacterDelimiter}})"]],
    "listChangeDelims": ["listChangeDelims(list, new_delimiter [, delimiters, [includeEmptyValues]])", ["(${1:list}, ${2:new_delimiter})", "(${1:string list}, ${2:string new_delimiter}${3:, ${4:string delimiters}}${5:, ${6:string includeEmptyValues}})"]],
    "listCompact": ["listCompact(list [, delimiters] [, multiCharacterDelimiter])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean multiCharacterDelimiter}})"]],
    "listContains": ["listContains(list, substring [, delimiters])", ["(${1:list}, ${2:substring})", "(${1:string list}, ${2:string substring}${3:, ${4:string delimiters}})"]],
    "listContainsNoCase": ["listContainsNoCase(list, substring [, delimiters])", ["(${1:list}, ${2:substring})", "(${1:string list}, ${2:string substring}${3:, ${4:string delimiters}})"]],
    "listDeleteAt": ["listDeleteAt(list, position [, delimiters])", ["(${1:list}, ${2:position})", "(${1:string list}, ${2:numeric position}${3:, ${4:string delimiters}})"]],
    "listEach": ["listEach(String str, UDFMethod function [, String delim, boolean includeEmptyFields]);", ["(${1:str}, ${2:function}, ${3:delim})", "(${1: str}, ${2: function}, ${3: delim}${4:, ${5: includeEmptyFields}})"]],
    "listEvery": ["listEvery(list, closure [, delimiter] [, includeEmptyFields] [, multiCharacterDelimiter] [, parallel] [, maxThreads])", ["(${1:list}, ${2:closure})", "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:numeric maxThreads}})"]],
    "listFilter": ["listFilter(list, function(listElement, [list]) )", ["(${1:list}, ${2:function})", "(${1:list list}, ${2:function function})"]],
    "listFind": ["listFind(list, value [, delimiters, includeEmptyValues])", ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:string includeEmptyValues}})"]],
    "listFindNoCase": ["listFindNoCase(list, value [, delimiters, includeEmptyValues])", ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:string includeEmptyValues}})"]],
    "listFirst": ["listFirst(list [, delimiters])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}})"]],
    "listGetAt": ["listGetAt(list, position [, delimiters [, includeEmptyValues]])", ["(${1:list}, ${2:position})", "(${1:string list}, ${2:numeric position}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyValues}})"]],
    "listIndexExists": ["listIndexExists(list, index [, delimiter] [, includeEmptyFields])", ["(${1:list}, ${2:index})", "(${1:string list}, ${2:numeric index}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}})"]],
    "listInsertAt": ["listInsertAt(list, position, value [, delimiters])", ["(${1:list}, ${2:position}, ${3:value})", "(${1:string list}, ${2:numeric position}, ${3:string value}${4:, ${5:string delimiters}})"]],
    "listItemTrim": ["listItemTrim(list [, delimiters] [, includeEmptyFields])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})"]],
    "listLast": ["listLast(list [, delimiters, includeEmptyValues ])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyValues}})"]],
    "listLen": ["listLen(list [, delimiters, [includeEmptyValues]])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:string includeEmptyValues}})"]],
    "listMap": [" listMap(list, function(item [,index, list]) [,delimiter, includeEmptyFields)", ["(${1:list}, ${2:function})", "(${1:string list}, ${2:any function}${3:, ${4:any intialValue}}${5:, ${6:string delimiter}}${7:, ${8:boolean includeEmptyFields}})"]],
    "listPrepend": ["listPrepend(someList, value [, delimiters, includeEmptyFields])", ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyFields}})"]],
    "listQualify": ["listQualify(list, qualifier [, delimiters] [, elements] [, includeEmptyValues])", ["(${1:list}, ${2:qualifier})", "(${1:string list}, ${2:string qualifier}${3:, ${4:string delimiters}}${5:, ${6:string elements}}${7:, ${8:boolean includeEmptyFields}})"]],
    "listReduce": [" listReduce(list, function(result, item [,index, list]) [,initialValue, delimiter, includeEmptyFields])", ["(${1:list}, ${2:function}, ${3:intialValue}, ${4:delimiter}, ${5:includeEmptyFields})", "(${1:string list}, ${2:any function}, ${3:any intialValue}, ${4:string delimiter}, ${5:boolean includeEmptyFields})"]],
    "listRemoveDuplicates": ["listRemoveDuplicates(list[, delimiter] [, ignoreCase])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiter}}${4:, ${5:boolean ignoreCase}})"]],
    "listRest": ["listRest(list [, delimiters])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}})"]],
    "listSetAt": ["listSetAt(list, position, value [, delimiters])", ["(${1:list}, ${2:position}, ${3:value})", "(${1:string list}, ${2:numeric position}, ${3:string value}${4:, ${5:string delimiters}})"]],
    "listSome": ["listSome(list, closure [, delimiter] [, includeEmptyFields] [, multiCharacterDelimiter] [, parallel] [, maxThreads])", ["(${1:list}, ${2:closure})", "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:numeric maxThreads}})"]],
    "listSort": ["listSort(list, sort_type [, sort_order] [, delimiters])", ["(${1:list}, ${2:sort_type})", "(${1:string list}, ${2:string sort_type}${3:, ${4:string sort_order}}${5:, ${6:string delimiters}})"]],
    "listToArray": ["listToArray(list [, delimiters] [, includeEmptyFields] [, multiCharacterDelimiter])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}})"]],
    "listTrim": ["listTrim(list [, delimiters])", ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}})"]],
    "listValueCount": ["listValueCount(list, value [, delimiters])", ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})"]],
    "listValueCountNoCase": ["listValueCountNoCase(list, value [, delimiters])", ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})"]],
    "lJustify": ["lJustify(String, length)", ["(${1:String}, ${2:length})", "(${1:string String}, ${2:numeric length})"]],
    "location": ["location(url [, addtoken] [, statuscode])", ["(${1:url})", "(${1:string url}${2:, ${3:boolean addtoken}}${4:, ${5:numeric statuscode}})"]],
    "log": ["log(number)", ["(${1:number})", "(${1:numeric number})"]],
    "log10": ["log10(number)", ["(${1:number})", "(${1:numeric number})"]],
    "lsCurrencyFormat": ["lsCurrencyFormat(number [, type])", ["(${1:number})", "(${1:numeric number}${2:, ${3:string type}})"]],
    "lsDateFormat": ["lsDateFormat(date [, mask, locale])", ["(${1:date})", "(${1:date date}${2:, ${3:string mask}}${4:, ${5:string locale}})"]],
    "lsDateTimeFormat": ["lsDateTimeFormat(date [, mask, locale, [timeZone]]);", ["(${1:date})", "(${1: date}${2:, ${3: mask}}${4:, ${5: locale}}${6:, ${7: timeZone}})"]],
    "lsDayOfWeek": ["lsDayOfWeek(date [, locale] [, timezone])", ["(${1:date})", "(${1:date date}${2:, ${3:string locale}}${4:, ${5:string timezone}})"]],
    "lsEuroCurrencyFormat": ["lsEuroCurrencyFormat(currency, type)", ["(${1:currency}, ${2:type})", "(${1:string currency}, ${2:string type})"]],
    "lsIsCurrency": ["lsIsCurrency(String)", ["(${1:String})", "(${1:string String})"]],
    "lsIsDate": ["lsIsDate(String)", ["(${1:String})", "(${1:string String})"]],
    "lsIsNumeric": ["lsIsNumeric(String)", ["(${1:String})", "(${1:string String})"]],
    "lsNumberFormat": ["lsNumberFormat(number [, mask])", ["(${1:number})", "(${1:numeric number}${2:, ${3:string mask}})"]],
    "lsParseCurrency": ["lsParseCurrency(String)", ["(${1:String})", "(${1:string String})"]],
    "lsParseDateTime": ["lsParseDateTime(dt_string)", ["(${1:dt_string})", "(${1:string dt_string})"]],
    "lsParseEuroCurrency": ["lsParseEuroCurrency(currency_string)", ["(${1:currency_string})", "(${1:string currency_string})"]],
    "lsParseNumber": ["lsParseNumber(String)", ["(${1:String})", "(${1:string String})"]],
    "lsTimeFormat": ["lsTimeFormat(time [, mask])", ["(${1:time})", "(${1:date time}${2:, ${3:string mask}})"]],
    "lsWeek": ["lsWeek(date [, locale] [, timezone])", ["(${1:date})", "(${1:date date}${2:, ${3:string locale}}${4:, ${5:string timezone}})"]],
    "lTrim": ["lTrim(String)", ["(${1:String})", "(${1:string String})"]],
    "manifestRead": ["manifestRead(path)", ["(${1:path})", "(${1:string path})"]],
    "max": ["max(number1, number2)", ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"]],
    "metaphone": ["metaphone(str)", ["(${1:str})", "(${1:string str})"]],
    "mid": ["mid(String, start, count)", ["(${1:String}, ${2:start}, ${3:count})", "(${1:string String}, ${2:numeric start}, ${3:numeric count})"]],
    "millisecond": ["millisecond(date [, timezone])", ["(${1:date})", "(${1:date date}${2:, ${3:string timezone}})"]],
    "min": ["min(number1, number2)", ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"]],
    "minute": ["minute(date)", ["(${1:date})", "(${1:date date})"]],
    "month": ["month(date)", ["(${1:date})", "(${1:date date})"]],
    "monthAsString": ["monthAsString(month_number)", ["(${1:month_number})", "(${1:numeric month_number})"]],
    "monthShortAsString": ["monthShortAsString(monthnumber)", ["(${1:monthnumber})", "(${1:numeric monthnumber})"]],
    "newLine": ["newLine()", ["()", "()"]],
    "now": ["now()", ["()", "()"]],
    "nowServer": ["nowServer()", ["()", "()"]],
    "nullValue": ["nullValue()", ["()", "()"]],
    "numberFormat": ["numberFormat(number [, mask])", ["(${1:number})", "(${1:numeric number}${2:, ${3:string mask}})"]],
    "objectEquals": ["objectEquals(Param1, Param2)", ["(${1:Param1}, ${2:Param2})", "(${1: Param1}, ${2: Param2})"]],
    "objectLoad": ["objectLoad(binaryObject)\nobjectLoad(filepath)", ["(${1:binaryObject}, ${2:filepath})", "(${1:binary binaryObject}, ${2:string filepath})"]],
    "objectSave": ["objectSave(object [, file])", ["(${1:object})", "(${1:variablename object}${2:, ${3:string file}})"]],
    "onApplicationEnd": ["function onApplicationEnd(applicationScope) { }", ["(${1:ApplicationScope})", "(${1:struct ApplicationScope})"]],
    "onApplicationStart": ["function onApplicationStart() { return true; }", ["()", "()"]],
    "onError": ["function onError(exception, eventName) {}", ["(${1:exception}, ${2:eventName})", "(${1:struct exception}, ${2:string eventName})"]],
    "onMissingMethod": ["function onMissingMethod(string missingMethodName, struct missingMethodArguments) { }", ["(${1:missingMethodName}, ${2:missingMethodArguments})", "(${1:string missingMethodName}, ${2:struct missingMethodArguments})"]],
    "onMissingTemplate": ["function onMissingTemplate(string targetPage) { return true; }", ["(${1:targetPage})", "(${1:string targetPage})"]],
    "onRequest": ["onRequestStart(string targetPage) { include arguments.targetPage; }", ["(${1:targetPage})", "(${1:string targetPage})"]],
    "onRequestEnd": ["function onRequestEnd(string targetPage) {  }", ["(${1:targetPage})", "(${1:string targetPage})"]],
    "onRequestStart": ["function onRequestStart(string targetPage) { return true; }", ["(${1:targetPage})", "(${1:string targetPage})"]],
    "onServerStart": ["function onServerStart() { }", ["()", "()"]],
    "onSessionEnd": ["function onSessionEnd(sessionScope, applicationScope) {}", ["(${1:sessionScope}, ${2:applicationScope})", "(${1:struct sessionScope}, ${2:struct applicationScope})"]],
    "onSessionStart": ["function onSessionStart() {}", ["()", "()"]],
    "ormClearSession": ["ormClearSession([datasource])", ["(${1:datasource})", "(${1:string datasource})"]],
    "ormCloseAllSessions": ["ormCloseAllSessions();", ["(${1:region})", "(${1: region})"]],
    "ormCloseSession": ["ormCloseSession([datasource])", ["(${1:datasource})", "(${1:string datasource})"]],
    "ormEvictCollection": ["ormEvictCollection(componentName, relationName [, id])", ["(${1:componentName}, ${2:relationName})", "(${1:string componentName}, ${2:string relationName}${3:, ${4:string id}})"]],
    "ormEvictEntity": ["ormEvictEntity(componentName [, id])", ["(${1:componentName})", "(${1:string componentName}${2:, ${3:string id}})"]],
    "ormEvictQueries": ["ormEvictQueries([cacheName])", ["(${1:cacheName})", "(${1:string cacheName})"]],
    "ormExecuteQuery": ["ormExecuteQuery(hql, params [,unique]);\normExecuteQuery(hql, [,unique] [, queryoptions]);\normExecuteQuery(hql, params [,unique] [,queryOptions])", ["(${1:hql})", "(${1:string hql}${2:, ${3:any params}}${4:, ${5:boolean unique}}${6:, ${7:string queryoptions}})"]],
    "ormFlush": ["ormFlush([datasource])", ["(${1:datasource})", "(${1:string datasource})"]],
    "ormFlushAll": ["ormFlushAll();", ["(${1:region})", "(${1: region})"]],
    "ormGetSession": ["ormGetSession()", ["()", "()"]],
    "ormGetSessionFactory": ["ormGetSessionFactory()", ["()", "()"]],
    "ormIndex": ["ormIndex(); ormIndex('entity_name'); ormIndex('entity_list'); ormIndex('entityObject');", ["()", "()"]],
    "ormIndexPurge": ["ormIndexPurge(); ormIndexPurge(\"entityName\"); ormIndexPurge(\"entityName_list\");", ["(${1:region})", "(${1: region})"]],
    "ormReload": ["ormReload()", ["()", "()"]],
    "ormSearch": ["ormSearch('query_text', 'entityName')\normSearch('query_text', 'entityName', fields)\normSearch('query_text', 'entityName', fields, optionMap);", ["(${1:query_text}, ${2:entityName}, ${3:fields}, ${4:optionMap})", "(${1: query_text}, ${2: entityName}, ${3: fields}, ${4: optionMap})"]],
    "ormSearchOffline": ["ormSearchOffline(query_text, entityName, fields_to_be_selected)\normSearchOffline(query_text, entityName, fields_to_be_selected, fields)\normSearchOffline(query_text, entityName, fields_to_be_selected, fields, optionMap);", ["(${1:query_text}, ${2:entityName}, ${3:fields_to_be_selected}, ${4:fields})", "(${1: query_text}, ${2: entityName}, ${3: fields_to_be_selected}, ${4: fields}${5:, ${6: optionMap}}${7:, ${8: extra options}})"]],
    "pagePoolClear": ["pagePoolClear()", ["()", "()"]],
    "pagePoolList": ["pagePoolList()", ["()", "()"]],
    "paragraphFormat": ["paragraphFormat(String)", ["(${1:String})", "(${1:string String})"]],
    "parameterExists": ["parameterExists(name)", ["(${1:parameter})", "(${1: parameter})"]],
    "parseDateTime": ["parseDateTime(dt_string [, pop_conversion])", ["(${1:dt_string})", "(${1:string dt_string}${2:, ${3:string pop_conversion}})"]],
    "parseNumber": ["parseNumber(number [, radix])", ["(${1:number})", "(${1:string number}${2:, ${3:string radix}})"]],
    "pi": ["pi()", ["()", "()"]],
    "precisionEvaluate": ["precisionEvaluate(expressions)", ["(${1:expressions})", "(${1:string expressions})"]],
    "preserveSingleQuotes": ["preserveSingleQuotes(variable)", ["(${1:variable})", "(${1:string variable})"]],
    "quarter": ["quarter(date)", ["(${1:date})", "(${1:date date})"]],
    "query": ["query()", ["()", "()"]],
    "queryAddColumn": ["queryAddColumn(query, column_name [, datatype], array_name)", ["(${1:query}, ${2:column_name}, ${3:array_name})", "(${1:query query}, ${2:string column_name}${3:, ${4:string datatype}}, ${5:array array_name})"]],
    "queryAddRow": ["queryAddRow(query [, number/row(s)])", ["(${1:query})", "(${1:query query}${2:, ${3:numeric / array / struct number/row(s)}})"]],
    "queryAppend": ["queryAppend(query1, query2)", ["(${1:query1}, ${2:query2})", "(${1:query query1}, ${2:query query2})"]],
    "queryColumnArray": ["queryColumnArray(query)", ["(${1:query})", "(${1:query query})"]],
    "queryColumnCount": ["queryColumnCount(query)", ["(${1:query})", "(${1:query query})"]],
    "queryColumnData": ["queryColumnData(query, columnName [, closure])", ["(${1:query}, ${2:columnName})", "(${1:query query}, ${2:string columnName}${3:, ${4:function closure}})"]],
    "queryColumnExists": ["queryColumnExists(query, column)", ["(${1:query}, ${2:column})", "(${1:query query}, ${2:string column})"]],
    "queryColumnList": ["queryColumnList(query [, delimiter])", ["(${1:query})", "(${1:query query}${2:, ${3:string delimiter}})"]],
    "queryConvertForGrid": ["queryConvertForGrid(query, page, pageSize)", ["(${1:query}, ${2:page}, ${3:pageSize})", "(${1:string query}, ${2:numeric page}, ${3:numeric pageSize})"]],
    "queryCurrentRow": ["queryCurrentRow(query)", ["(${1:query})", "(${1:query query})"]],
    "queryDeleteColumn": ["queryDeleteColumn(query, column)", ["(${1:query}, ${2:column})", "(${1:query query}, ${2:string column})"]],
    "queryDeleteRow": ["queryDeleteRow(query [, row])", ["(${1:query})", "(${1:query query}${2:, ${3:numeric row}})"]],
    "queryEach": ["queryEach(query, function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:query}, ${2:callback})", "(${1:query query}, ${2:any callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "queryEvery": ["queryEvery(query, closure [, parallel] [, maxThreads])", ["(${1:query}, ${2:closure})", "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "queryExecute": ["queryExecute(sql [, params, queryOptions])", ["(${1:sql})", "(${1:string sql}${2:, ${3:any params}}${4:, ${5:struct queryOptions}})"]],
    "queryFilter": ["queryFilter(query, function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:query}, ${2:callback})", "(${1:query query}, ${2:boolean callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "queryGetCell": ["queryGetCell(query, column_name [, row_number])", ["(${1:query}, ${2:column_name})", "(${1:query query}, ${2:string column_name}${3:, ${4:numeric row_number}})"]],
    "queryGetResult": ["queryGetResult(query)", ["(${1:query})", "(${1:query query})"]],
    "queryGetRow": ["queryGetRow( query, rowNumber );", ["(${1:query}, ${2:rowNumber})", "(${1: query}, ${2: rowNumber})"]],
    "queryKeyExists": ["queryKeyExists(query, key)", ["(${1:query}, ${2:key})", "(${1:query query}, ${2:string key})"]],
    "queryMap": ["queryMap(query, function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:query}, ${2:callback})", "(${1:query query}, ${2:boolean callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "queryNew": ["queryNew(columnList [, columnTypeList [, rowData]])", ["(${1:columnList})", "(${1:string columnList}${2:, ${3:string columnTypeList}}${4:, ${5:any rowData}})"]],
    "queryPrepend": ["queryPrepend(query1, query2)", ["(${1:query1}, ${2:query2})", "(${1:query query1}, ${2:query query2})"]],
    "queryRecordCount": ["queryRecordCount(query)", ["(${1:query})", "(${1:query query})"]],
    "queryReduce": ["queryReduce(struct, function(result, row [, currentRow] [, query]){} [, initialVal])", ["(${1:query}, ${2:callback})", "(${1:query query}, ${2:any callback}${3:, ${4:any initialValue}})"]],
    "queryReverse": ["queryReverse(query)", ["(${1:query})", "(${1:query query})"]],
    "queryRowData": ["queryRowData(query, rowNumber)", ["(${1:query}, ${2:rowNumber})", "(${1:query query}, ${2:numeric rowNumber})"]],
    "querySetCell": ["querySetCell(query, column, value [, row])", ["(${1:query}, ${2:column}, ${3:value})", "(${1:query query}, ${2:string column}, ${3:any value}${4:, ${5:numeric row}})"]],
    "querySlice": ["querySlice(query, offset [, length])", ["(${1:query}, ${2:offset})", "(${1:query query}, ${2:numeric offset}${3:, ${4:numeric length}})"]],
    "querySome": ["querySome(query, function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])", ["(${1:query}, ${2:callback})", "(${1:query query}, ${2:boolean callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "querySort": ["querySort(query, sortFunction)", ["(${1:query}, ${2:sortFunction})", "(${1:query query}, ${2:function sortFunction}${3:, ${4:string direction}})"]],
    "quotedValueList": ["quotedValueList(column [, delimiter])", ["(${1:column})", "(${1:querycolumn column}${2:, ${3:string delimiter}})"]],
    "rand": ["rand([algorithm])", ["(${1:algorithm})", "(${1:string algorithm})"]],
    "randomize": ["randomize(number [, algorithm])", ["(${1:number})", "(${1:numeric number}${2:, ${3:string algorithm}})"]],
    "randRange": ["randRange(number1, number2 [, algorithm])", ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2}${3:, ${4:string algorithm}})"]],
    "reEscape": ["reEscape(string);", ["(${1:string})", "(${1: string})"]],
    "reFind": ["reFind(reg_expression, string [, start] [, returnsubexpressions])", ["(${1:reg_expression}, ${2:string})", "(${1:regex reg_expression}, ${2:string string}${3:, ${4:numeric start}}${5:, ${6:boolean returnsubexpressions}}${7:, ${8:string scope}})"]],
    "reFindNoCase": ["reFindNoCase(reg_expression, String [, start] [, returnsubexpressions])", ["(${1:reg_expression}, ${2:string})", "(${1:regex reg_expression}, ${2:string string}${3:, ${4:numeric start}}${5:, ${6:boolean returnsubexpressions}}${7:, ${8:string scope}})"]],
    "releaseCOMObject": ["releaseCOMObject(objectName)", ["(${1:objectName})", "(${1:any objectName})"]],
    "reMatch": ["reMatch(reg_expression, string)", ["(${1:reg_expression}, ${2:string})", "(${1:string reg_expression}, ${2:string string})"]],
    "reMatchNoCase": ["reMatchNoCase(reg_expression, string)", ["(${1:reg_expression}, ${2:string})", "(${1:string reg_expression}, ${2:string string})"]],
    "removeCachedQuery": ["removeCachedQuery(SQL_, datasource, params, region___);", ["(${1:SQL}, ${2:datasource})", "(${1: SQL}, ${2: datasource}${3:, ${4: params}}${5:, ${6: region}})"]],
    "removeChars": ["removeChars(String, start, count)", ["(${1:String}, ${2:start}, ${3:count})", "(${1:string String}, ${2:numeric start}, ${3:numeric count})"]],
    "render": ["render(CFML[, dialect ])", ["(${1:CFML})", "(${1:string CFML}${2:, ${3:string dialect}})"]],
    "repeatString": ["repeatString(String, count)", ["(${1:String}, ${2:count})", "(${1:string String}, ${2:numeric count})"]],
    "replace": ["replace(String, substring1, substring2 [, scope])", ["(${1:String}, ${2:substring1}, ${3:substring2})", "(${1:string String}, ${2:string substring1}, ${3:string substring2}${4:, ${5:string scope}})"]],
    "replaceList": ["replaceList(String, list1, list2 [, includeEmptyFields])\nreplaceList(String, list1, list2, delimiter [, includeEmptyFields])\nreplaceList(String, list1, list2, delimiterList1, delimiterList2 [, includeEmptyFields])", ["(${1:String}, ${2:list1}, ${3:list2})", "(${1:string String}, ${2:string list1}, ${3:string list2}${4:, ${5:string delimiter}}${6:, ${7:string delimiterList1}}${8:, ${9:string delimiterList2}}${10:, ${11:boolean includeEmptyFields}})"]],
    "replaceListNoCase": ["replaceListNoCase(String, list1, list2, includeEmptyFields)\nreplaceListNoCase(String, list1, list2, delimiter, includeEmptyFields)\nreplaceListNoCase(String, list1, list2, delimiterList1, delimiterList2, includeEmptyFields)", ["(${1:String}, ${2:list1}, ${3:list2})", "(${1:string String}, ${2:string list1}, ${3:string list2}${4:, ${5:string delimiter}}${6:, ${7:string delimiterList1}}${8:, ${9:string delimiterList2}}${10:, ${11:boolean includeEmptyFields}})"]],
    "replaceNoCase": ["replaceNoCase(String, substring1, substring2 [, scope])", ["(${1:String}, ${2:substring1}, ${3:substring2})", "(${1:string String}, ${2:string substring1}, ${3:string substring2}${4:, ${5:string scope}})"]],
    "reReplace": ["reReplace(string, regex, substring [, scope])", ["(${1:string}, ${2:regex}, ${3:substring})", "(${1:string string}, ${2:regex regex}, ${3:string substring}${4:, ${5:string scope}})"]],
    "reReplaceNoCase": ["reReplaceNoCase(String, reg_expression, substring [, scope])", ["(${1:String}, ${2:reg_expression}, ${3:substring})", "(${1:string String}, ${2:regex reg_expression}, ${3:string substring}${4:, ${5:string scope}})"]],
    "restDeleteApplication": ["restDeleteApplication('dirPath');", ["(${1:dirPath})", "(${1: dirPath})"]],
    "restInitApplication": ["restInitApplication(dirPath,serviceMapping,default,password)", ["(${1:dirPath}, ${2:serviceMapping}, ${3:password})", "(${1:string dirPath}, ${2:string serviceMapping}${3:, ${4:string default}}, ${5:string password})"]],
    "restSetResponse": ["restSetResponse(response);", ["(${1:response})", "(${1: response})"]],
    "reverse": ["reverse(String)", ["(${1:String})", "(${1:string String})"]],
    "right": ["right(String, count)", ["(${1:String}, ${2:count})", "(${1:string String}, ${2:numeric count})"]],
    "rJustify": ["rJustify(String, length)", ["(${1:String}, ${2:length})", "(${1:string String}, ${2:numeric length})"]],
    "round": ["round(number)", ["(${1:number})", "(${1:numeric number})"]],
    "rTrim": ["rTrim(String)", ["(${1:String})", "(${1:string String})"]],
    "runAsync": ["runAsync(function() {})", ["(${1:callback})", "(${1:function callback}${2:, ${3:numeric timeout}})"]],
    "second": ["second(date)", ["(${1:date})", "(${1:date date})"]],
    "sendGatewayMessage": ["sendGatewayMessage(gatewayID, data)", ["(${1:gatewayID}, ${2:data})", "(${1:string gatewayID}, ${2:struct data})"]],
    "serialize": ["serialize( objToBeSerialized, type, useCustomSerializer );", ["(${1:objToBeSerialized}, ${2:type}, ${3:useCustomSerializer})", "(${1:any objToBeSerialized}, ${2:string type}, ${3:boolean useCustomSerializer})"]],
    "serializeJSON": ["serializeJSON(var[, serializeQueryByColumns[, useSecureJSONPrefix[, useCustomSerializer]]])", ["(${1:var})", "(${1:variablename var}${2:, ${3:boolean serializeQueryByColumns}}${4:, ${5:boolean useSecureJSONPrefix}}${6:, ${7:boolean useCustomSerializer}})"]],
    "serializeXML": ["serializeXML( Object objToBeSerialized, boolean useCustomSerializer );", ["(${1:objToBeSerialized}, ${2:useCustomSerializer})", "(${1: objToBeSerialized}, ${2: useCustomSerializer})"]],
    "sessionGetMetadata": ["sessionGetMetadata();", ["(${1:region})", "(${1: region})"]],
    "sessionInvalidate": ["sessionInvalidate()", ["()", "()"]],
    "sessionRotate": ["sessionRotate()", ["()", "()"]],
    "sessionstartTime": ["sessionstartTime()", ["()", "()"]],
    "setEncoding": ["setEncoding(scope_name, charset)", ["(${1:scope_name}, ${2:charset})", "(${1:string scope_name}, ${2:string charset})"]],
    "setLocale": ["setLocale(new_locale)", ["(${1:new_locale})", "(${1:string new_locale})"]],
    "setProfileString": ["setProfileString(inipath, section, entry, value)", ["(${1:inipath}, ${2:section}, ${3:entry}, ${4:value})", "(${1:string inipath}, ${2:string section}, ${3:string entry}, ${4:string value})"]],
    "setTimezone": ["setTimezone(timezone)", ["(${1:timezone})", "(${1:string timezone})"]],
    "setVariable": ["setVariable(name, value)", ["(${1:name}, ${2:value})", "(${1:string name}, ${2:string value})"]],
    "sgn": ["sgn(number)", ["(${1:number})", "(${1:numeric number})"]],
    "sin": ["sin(number)", ["(${1:number})", "(${1:numeric number})"]],
    "sizeOf": ["sizeOf(obj [, complex])", ["(${1:obj})", "(${1:any obj}${2:, ${3:boolean complex}})"]],
    "sleep": ["sleep(duration)", ["(${1:duration})", "(${1: duration})"]],
    "soundEx": ["soundEx(str)", ["(${1:str})", "(${1:string str})"]],
    "spanExcluding": ["spanExcluding(String, set)", ["(${1:String}, ${2:set})", "(${1:string String}, ${2:string set})"]],
    "spanIncluding": ["spanIncluding(String, set)", ["(${1:String}, ${2:set})", "(${1:string String}, ${2:string set})"]],
    "spreadsheetAddAutoFilter": ["spreadsheetAddAutoFilter(SpreadsheetObj, autofilter)", ["(${1:spreadsheetObj}, ${2:autofilter})", "(${1:any spreadsheetObj}, ${2:string autofilter})"]],
    "spreadsheetAddColumn": ["spreadsheetAddColumn(spreadsheetObj, data, startrow, startcolumn, insert [, insert])", ["(${1:spreadsheetObj}, ${2:data}, ${3:startrow}, ${4:startcolumn}, ${5:insert})", "(${1:variablename spreadsheetObj}, ${2:string data}, ${3:numeric startrow}, ${4:numeric startcolumn}, ${5:boolean insert}${6:, ${7:boolean insert}})"]],
    "spreadsheetAddFreezePane": ["spreadsheetAddFreezePane(spreadsheetObj, column, row [, endColumn] [, endRow])", ["(${1:spreadsheetObj}, ${2:freezeColumn}, ${3:freezeRow})", "(${1:variablename spreadsheetObj}, ${2:numeric freezeColumn}, ${3:numeric freezeRow}${4:, ${5:numeric hideColumn}}${6:, ${7:numeric hideRow}})"]],
    "spreadsheetAddimage": ["spreadsheetAddimage(spreadsheetObj, imagefilepath, anchor)", ["(${1:spreadsheetObj}, ${2:imagefilepath}, ${3:anchor})", "(${1:variablename spreadsheetObj}, ${2:string imagefilepath}, ${3:string anchor})"]],
    "spreadsheetAddInfo": ["spreadsheetAddInfo(spreadsheetObj, info)", ["(${1:spreadsheetObj}, ${2:info})", "(${1:variablename spreadsheetObj}, ${2:struct info})"]],
    "spreadsheetAddPagebreaks": ["spreadsheetAddPagebreaks(SpreadsheetObj, rowbreaks, colbreaks)", ["(${1:SpreadsheetObj}, ${2:rowbreaks}, ${3:colbreaks})", "(${1:any SpreadsheetObj}, ${2:string rowbreaks}, ${3:string colbreaks})"]],
    "spreadsheetAddRow": ["spreadsheetAddRow(spreadsheetObj, data [, row] [, column] [, insert] [, datatype])", ["(${1:spreadsheetObj}, ${2:data})", "(${1:variablename spreadsheetObj}, ${2:string data}${3:, ${4:numeric row}}${5:, ${6:numeric column}}${7:, ${8:boolean insert}}${9:, ${10:array datatype}})"]],
    "spreadsheetAddRows": ["spreadsheetAddRows(spreadsheetObj, data,[ row, column , insert, datatype, includeColumnNames])", ["(${1:spreadsheetObj}, ${2:data})", "(${1:variablename spreadsheetObj}, ${2:any data}${3:, ${4:numeric row}}${5:, ${6:numeric column}}${7:, ${8:boolean insert}}${9:, ${10:array datatype}}${11:, ${12:boolean includeColumnNames}})"]],
    "spreadsheetAddSplitPane": ["spreadsheetAddSplitPane(spreadsheetObj, x, y, splitColumn, splitRow [, position])", ["(${1:spreadsheetObj}, ${2:x}, ${3:y}, ${4:splitColumn}, ${5:splitRow})", "(${1:variablename spreadsheetObj}, ${2:numeric x}, ${3:numeric y}, ${4:numeric splitColumn}, ${5:numeric splitRow}${6:, ${7:string position}})"]],
    "spreadsheetCreateSheet": ["spreadsheetCreateSheet(spreadsheetObj, name)", ["(${1:spreadsheetObj}, ${2:name})", "(${1:variablename spreadsheetObj}, ${2:string name})"]],
    "spreadsheetDeleteColumn": ["spreadsheetDeleteColumn(spreadsheetObj, column)", ["(${1:spreadsheetObj}, ${2:column})", "(${1:variablename spreadsheetObj}, ${2:numeric column})"]],
    "spreadsheetDeleteColumns": ["spreadsheetDeleteColumns(spreadsheetObj, range)", ["(${1:spreadsheetObj}, ${2:range})", "(${1:variablename spreadsheetObj}, ${2:numeric range})"]],
    "spreadsheetDeleteRow": ["spreadsheetDeleteRow(spreadsheetObj, row)", ["(${1:spreadsheetObj}, ${2:row})", "(${1:variablename spreadsheetObj}, ${2:numeric row})"]],
    "spreadsheetDeleteRows": ["spreadsheetDeleteRows(spreadsheetObj, range)", ["(${1:spreadsheetObj}, ${2:range})", "(${1:variablename spreadsheetObj}, ${2:numeric range})"]],
    "spreadsheetFormatCell": ["spreadsheetFormatCell(spreadsheetObj, format, row, column)", ["(${1:spreadsheetObj}, ${2:format}, ${3:row}, ${4:column})", "(${1:any spreadsheetObj}, ${2:struct format}, ${3:numeric row}, ${4:numeric column})"]],
    "spreadsheetFormatCellRange": ["spreadsheetFormatCellRange (spreadsheetObj, format, startRow, startColumn, endRow, endColumn)", ["(${1:spreadsheetObj}, ${2:format}, ${3:startRow}, ${4:startColumn}, ${5:endRow}, ${6:endColumn})", "(${1:any spreadsheetObj}, ${2:struct format}, ${3:numeric startRow}, ${4:numeric startColumn}, ${5:numeric endRow}, ${6:numeric endColumn})"]],
    "spreadsheetFormatColumn": ["spreadsheetFormatColumn(spreadsheetObj, format, column)", ["(${1:spreadsheetObj}, ${2:format}, ${3:column})", "(${1:any spreadsheetObj}, ${2:struct format}, ${3:numeric column})"]],
    "spreadsheetFormatColumns": ["spreadsheetFormatColumns(spreadsheetObj, format, columns)", ["(${1:spreadsheetObj}, ${2:format}, ${3:columns})", "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:string columns})"]],
    "spreadsheetFormatRow": ["spreadsheetFormatRow(spreadsheetObj, format, row)", ["(${1:spreadsheetObj}, ${2:format}, ${3:row})", "(${1:any spreadsheetObj}, ${2:struct format}, ${3:numeric row})"]],
    "spreadsheetFormatRows": ["spreadsheetFormatRows(spreadsheetObj, format, rows)", ["(${1:spreadsheetObj}, ${2:format}, ${3:rows})", "(${1:any spreadsheetObj}, ${2:struct format}, ${3:string rows})"]],
    "spreadsheetGetCellComment": ["spreadsheetGetCellComment(author [, column] [, comment] [, row])", ["(${1:author})", "(${1:string author}${2:, ${3:numeric column}}${4:, ${5:string comment}}${6:, ${7:string row}})"]],
    "spreadsheetGetCellFormula": ["spreadsheetGetCellFormula(spreadsheetObj, row, column)", ["(${1:spreadsheetObj}, ${2:row}, ${3:column})", "(${1:variablename spreadsheetObj}, ${2:numeric row}, ${3:numeric column})"]],
    "spreadsheetGetCellValue": ["spreadsheetGetCellValue(spreadsheetObj, row, column)", ["(${1:spreadsheetObj}, ${2:row}, ${3:column})", "(${1:variablename spreadsheetObj}, ${2:string row}, ${3:string column})"]],
    "spreadsheetGetColumnCount": ["spreadsheetAddRow(spreadsheetObj, [sheet])", ["(${1:spreadsheetObj})", "(${1:any spreadsheetObj}${2:, ${3:string sheet}})"]],
    "spreadsheetInfo": ["spreadsheetInfo(spreadsheetObj)", ["(${1:spreadsheetObj})", "(${1:variablename spreadsheetObj})"]],
    "spreadsheetMergeCells": ["spreadsheetMergeCells(spreadsheetObj, startrow, endrow, startcolumn, endcolumn)", ["(${1:spreadsheetObj}, ${2:startrow}, ${3:endrow}, ${4:startcolumn}, ${5:endcolumn})", "(${1:variablename spreadsheetObj}, ${2:numeric startrow}, ${3:numeric endrow}, ${4:numeric startcolumn}, ${5:numeric endcolumn})"]],
    "spreadsheetNew": ["spreadsheetNew([sheetname] [, xmlFormat])", ["(${1:sheetname})", "(${1:string sheetname}${2:, ${3:boolean xmlFormat}})"]],
    "spreadsheetRead": ["spreadsheetRead(fileName, spreadsheetObj)", ["(${1:fileName}, ${2:spreadsheetObj})", "(${1:string fileName}, ${2:variablename spreadsheetObj})"]],
    "spreadsheetReadBinary": ["spreadsheetReadBinary(spreadsheetObj)", ["(${1:spreadsheetObj})", "(${1:variablename spreadsheetObj})"]],
    "spreadsheetRemoveSheet": ["spreadsheetRemoveSheet (spreadsheetObj, sheetname);", ["(${1:spreadsheetObj}, ${2:sheetname})", "(${1: spreadsheetObj}, ${2: sheetname})"]],
    "spreadsheetSetActiveSheet": ["spreadsheetSetActiveSheet(spreadsheetObj [, name])", ["(${1:spreadsheetObj})", "(${1:variablename spreadsheetObj}${2:, ${3:string name}})"]],
    "spreadsheetSetActiveSheetNumber": ["spreadsheetSetActiveSheetNumber(spreadsheetObj [, number])", ["(${1:spreadsheetObj})", "(${1:variablename spreadsheetObj}${2:, ${3:numeric number}})"]],
    "spreadsheetSetCellComment": ["spreadsheetSetCellComment(spreadsheetObj, comment, row, column)", ["(${1:spreadsheetObj}, ${2:comment}, ${3:row}, ${4:column})", "(${1:variablename spreadsheetObj}, ${2:string comment}, ${3:numeric row}, ${4:numeric column})"]],
    "spreadsheetSetCellFormula": ["spreadsheetSetCellFormula(spreadsheetObj, formula, row, column)", ["(${1:spreadsheetObj}, ${2:formula}, ${3:row}, ${4:column})", "(${1:variablename spreadsheetObj}, ${2:string formula}, ${3:numeric row}, ${4:numeric column})"]],
    "spreadsheetSetCellValue": ["spreadsheetSetCellValue(spreadsheetObj, value, row, column)", ["(${1:spreadsheetObj}, ${2:value}, ${3:row}, ${4:column})", "(${1:variablename spreadsheetObj}, ${2:string value}, ${3:numeric row}, ${4:numeric column})"]],
    "spreadsheetSetColumnWidth": ["spreadsheetSetColumnWidth(spreadsheetObj, columnNumber, width)", ["(${1:spreadsheetObj}, ${2:columnNumber}, ${3:width})", "(${1:variablename spreadsheetObj}, ${2:numeric columnNumber}, ${3:numeric width})"]],
    "spreadsheetSetFooter": ["spreadsheetSetFooter(spreadsheetObj, leftFooter, centerFooter, rightFooter)", ["(${1:spreadsheetObj}, ${2:leftFooter}, ${3:centerFooter}, ${4:rightFooter})", "(${1:variablename spreadsheetObj}, ${2:string leftFooter}, ${3:string centerFooter}, ${4:string rightFooter})"]],
    "spreadsheetSetHeader": ["spreadsheetSetHeader(spreadsheetObj, leftHeader, centerHeader, rightHeader)", ["(${1:spreadsheetObj}, ${2:leftHeader}, ${3:centerHeader}, ${4:rightHeader})", "(${1:variablename spreadsheetObj}, ${2:string leftHeader}, ${3:string centerHeader}, ${4:string rightHeader})"]],
    "spreadsheetSetRowHeight": ["spreadsheetSetRowHeight(spreadsheetObj, rowNumber, height)", ["(${1:spreadsheetObj}, ${2:rowNumber}, ${3:height})", "(${1:variablename spreadsheetObj}, ${2:numeric rowNumber}, ${3:numeric height})"]],
    "spreadsheetShiftColumns": ["spreadsheetShiftColumns(spreadsheetObj, start [, end] [, start])", ["(${1:spreadsheetObj}, ${2:start})", "(${1:variablename spreadsheetObj}, ${2:numeric start}${3:, ${4:numeric end}}${5:, ${6:numeric start}})"]],
    "spreadsheetShiftRows": ["spreadsheetShiftRows(spreadsheetObj, start, end [, rows])", ["(${1:spreadsheetObj}, ${2:start}, ${3:end})", "(${1:variablename spreadsheetObj}, ${2:numeric start}, ${3:numeric end}${4:, ${5:numeric rows}})"]],
    "spreadsheetwrite": ["spreadsheetwrite(spreadsheetObj, fileName [, password] [, overwrite])", ["(${1:spreadsheetObj}, ${2:fileName})", "(${1:variablename spreadsheetObj}, ${2:string fileName}${3:, ${4:string password}}${5:, ${6:boolean overwrite}})"]],
    "sqr": ["sqr(number)", ["(${1:number})", "(${1:numeric number})"]],
    "sslCertificateInstall": ["sslCertificateInstall(host [, port])", ["(${1:host})", "(${1:string host}${2:, ${3:numeric port}})"]],
    "sslCertificateList": ["sslCertificateList(host [, port])", ["(${1:host})", "(${1:string host}${2:, ${3:numeric port}})"]],
    "storeAddACL": ["storeAddACL(url, ACLObject);", ["(${1:url}, ${2:ACLObject})", "(${1: url}, ${2: ACLObject})"]],
    "storeGetACL": ["storeGetACL(url, ACLObject);", ["(${1:ulr}, ${2:ACLObject})", "(${1: ulr}, ${2: ACLObject})"]],
    "storeGetMetadata": ["storeGetMetadata(url);", ["(${1:url})", "(${1: url})"]],
    "storeSetACL": ["storeSetACL(url, ACLObject);", ["(${1:url}, ${2:ACLObject})", "(${1: url}, ${2: ACLObject})"]],
    "storeSetMetadata": ["storeSetMetadata(url,Struct);", ["(${1:url}, ${2:region})", "(${1: url}, ${2: region})"]],
    "stringLen": ["stringLen(string)", ["(${1:string})", "(${1:string string})"]],
    "stripCR": ["stripCR(String)", ["(${1:String})", "(${1:string String})"]],
    "structAppend": ["structAppend(destStruct, sourceStruct [, overwriteFlag])", ["(${1:destStruct}, ${2:sourceStruct})", "(${1:struct destStruct}, ${2:struct sourceStruct}${3:, ${4:boolean overwriteFlag}})"]],
    "structClear": ["structClear(structure)", ["(${1:structure})", "(${1:struct structure})"]],
    "structCopy": ["structCopy(structure)", ["(${1:structure})", "(${1:struct structure})"]],
    "structCount": ["structCount(structure)", ["(${1:structure})", "(${1:struct structure})"]],
    "structDelete": ["structDelete(structure, key [, indicateNotExisting])", ["(${1:structure}, ${2:key})", "(${1:string structure}, ${2:string key}${3:, ${4:boolean indicateNotExisting}})"]],
    "structEach": ["structEach(struct,function(key, value [, struct]){} [, parallel] [, maxThreads])", ["(${1:struct}, ${2:callback})", "(${1:string struct}, ${2:any callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "structEquals": ["structEquals(struct1,  struct2)", ["(${1:struct1}, ${2:struct2})", "(${1:struct struct1}, ${2:struct struct2})"]],
    "structEvery": ["structEvery(struct, closure [, parallel] [, maxThreads])", ["(${1:struct}, ${2:closure})", "(${1:struct struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "structFilter": ["structFilter(struct,function(key, value [,struct]){} [, parallel] [, maxThreads])", ["(${1:struct}, ${2:callback})", "(${1:struct struct}, ${2:boolean callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "structFind": ["structFind(structure, key [, defaultValue ])", ["(${1:structure}, ${2:key})", "(${1:struct structure}, ${2:string key}${3:, ${4:any defaultValue}})"]],
    "structFindKey": ["structFindKey(top, value, scope)", ["(${1:top}, ${2:value}, ${3:scope})", "(${1:any top}, ${2:string value}, ${3:string scope})"]],
    "structFindValue": ["structFindValue(top, value [, scope])", ["(${1:top}, ${2:value})", "(${1:any top}, ${2:string value}${3:, ${4:string scope}})"]],
    "structGet": ["structGet(path)", ["(${1:path})", "(${1:string path})"]],
    "structGetMetadata": ["structGetMetadata(struct)", ["(${1:struct})", "(${1:struct struct})"]],
    "structInsert": ["structInsert(structure, key, value [, allowoverwrite])", ["(${1:structure}, ${2:key}, ${3:value})", "(${1:struct structure}, ${2:string key}, ${3:any value}${4:, ${5:boolean allowoverwrite}})"]],
    "structIsEmpty": ["structIsEmpty(structure)", ["(${1:structure})", "(${1:struct structure})"]],
    "structIsOrdered": ["structIsOrdered()", ["(${1:struct})", "(${1:struct struct})"]],
    "structKeyArray": ["structKeyArray(structure)", ["(${1:structure})", "(${1:struct structure})"]],
    "structKeyExists": ["structKeyExists(structure, key)", ["(${1:structure}, ${2:key})", "(${1:struct structure}, ${2:string key})"]],
    "structKeyList": ["structKeyList(structure [, delimiter])", ["(${1:structure})", "(${1:struct structure}${2:, ${3:string delimiter}})"]],
    "structKeyTranslate": ["structKeyTranslate(structure [, deepTranslation] [, leaveOriginalKey])", ["(${1:structure})", "(${1:struct structure}${2:, ${3:boolean deepTranslation}}${4:, ${5:boolean leaveOriginalKey}})"]],
    "structListNew": ["structListNew(maxsize)", ["(${1:maxsize})", "(${1:numeric maxsize})"]],
    "structMap": ["structMap(struct, function(key, value [,struct]){} [, parallel] [, maxThreads])", ["(${1:struct}, ${2:callback})", "(${1:struct struct}, ${2:any callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "structNew": ["structNew([structType])", ["(${1:structType})", "(${1:string structType})"]],
    "structReduce": ["structReduce(struct, function(result, key, value [,struct]){} [, initialVal])", ["(${1:struct}, ${2:callback}, ${3:initialVal})", "(${1:struct struct}, ${2:any callback}, ${3:any initialVal})"]],
    "structSetMetadata": ["structSetMetadata(inputStruct, metaStruct)", ["(${1:inputStruct}, ${2:metaStruct})", "(${1:struct inputStruct}, ${2:struct metaStruct})"]],
    "structSome": ["structSome(struct, function(key, value [,struct]){} [, parallel] [, maxThreads])", ["(${1:struct}, ${2:callback})", "(${1:struct struct}, ${2:boolean callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"]],
    "structSort": ["structSort(base, sorttype, sortorder, pathtosubelement, localeSensitive)\nstructSort(base, callback)", ["(${1:base})", "(${1:struct base}${2:, ${3:string sorttype}}${4:, ${5:string sortorder}}${6:, ${7:string pathtosubelement}}${8:, ${9:boolean localeSensitive}}${10:, ${11:function callback}})"]],
    "structToSorted": ["structToSorted(structure, callback)\nstructToSorted(structure, sorttype, sortorder, localeSensitive)", ["(${1:structure})", "(${1:struct structure}${2:, ${3:function callback}}${4:, ${5:string sorttype}}${6:, ${7:string sortorder}}${8:, ${9:boolean localeSensitive}})"]],
    "structUpdate": ["structUpdate(structure, key, value)", ["(${1:structure}, ${2:key}, ${3:value})", "(${1:struct structure}, ${2:string key}, ${3:any value})"]],
    "structValueArray": ["structValueArray(structure)", ["(${1:structure})", "(${1:struct structure})"]],
    "systemCacheClear": ["systemCacheClear([cacheName])", ["(${1:cacheName})", "(${1:string cacheName})"]],
    "systemOutput": ["systemOutput(obj [, addNewLine] [, doErrorStream])", ["(${1:obj})", "(${1:any obj}${2:, ${3:boolean addNewLine}}${4:, ${5:boolean doErrorStream}})"]],
    "tan": ["tan(number)", ["(${1:number})", "(${1:numeric number})"]],
    "threadJoin": ["threadJoin()", ["(${1:threadName})", "(${1:string threadName}${2:, ${3:numeric timeout}})"]],
    "threadTerminate": ["threadTerminate(threadname)", ["(${1:threadname})", "(${1:string threadname})"]],
    "throw": ["throw([message] [, type] [, detail] [, errorcode] [, extendedinfo] [, object])", ["(${1:message})", "(${1:string message}${2:, ${3:string type}}${4:, ${5:string detail}}${6:, ${7:string errorcode}}${8:, ${9:string extendedinfo}}${10:, ${11:any object}})"]],
    "timeFormat": ["timeFormat(time [, mask])", ["(${1:time})", "(${1:date time}${2:, ${3:string mask}})"]],
    "toBase64": ["toBase64(string_or_object [, encoding])", ["(${1:string_or_object})", "(${1:any string_or_object}${2:, ${3:string encoding}})"]],
    "toBinary": ["toBinary(base64_or_object)", ["(${1:base64_or_object})", "(${1:any base64_or_object})"]],
    "toNumeric": ["toNumeric(value [, radix])", ["(${1:value})", "(${1:any value}${2:, ${3:any radix}})"]],
    "toScript": ["toScript(cfvar, javascriptvar [, outputformat] [, asformat])", ["(${1:cfvar}, ${2:javascriptvar})", "(${1:any cfvar}, ${2:string javascriptvar}${3:, ${4:boolean outputformat}}${5:, ${6:boolean asformat}})"]],
    "toString": ["toString(any_value [, encoding])", ["(${1:any_value})", "(${1:any any_value}${2:, ${3:string encoding}})"]],
    "trace": ["trace([var] [, text] [, type] [, category] [, inline] [, abort])", ["(${1:var})", "(${1:string var}${2:, ${3:string text}}${4:, ${5:string type}}${6:, ${7:string category}}${8:, ${9:boolean inline}}${10:, ${11:boolean abort}})"]],
    "transactionCommit": ["transactionCommit()", ["()", "()"]],
    "transactionRollback": ["transactionRollback([savepoint])", ["(${1:savepoint})", "(${1:string savepoint})"]],
    "transactionSetSavepoint": ["transactionSetSavepoint(savepoint)", ["(${1:savepoint})", "(${1:string savepoint})"]],
    "trim": ["trim(String)", ["(${1:String})", "(${1:string String})"]],
    "trueFalseFormat": ["trueFalseFormat(value)", ["(${1:value})", "(${1:boolean value})"]],
    "uCase": ["uCase(String)", ["(${1:String})", "(${1:string String})"]],
    "ucFirst": ["ucFirst(string [, doAll] [, doLowerIfAllUppercase])", ["(${1:string})", "(${1:string string}${2:, ${3:boolean doAll}}${4:, ${5:boolean doLowerIfAllUppercase}})"]],
    "unserializeJava": ["unserializeJava(string)", ["(${1:string})", "(${1:string string})"]],
    "urlDecode": ["urlDecode(urlencodedstring [, charset])", ["(${1:urlencodedstring})", "(${1:string urlencodedstring}${2:, ${3:string charset}})"]],
    "urlEncode": ["urlEncode(string [, charset] [, force])", ["(${1:string})", "(${1:string string}${2:, ${3:string charset}}${4:, ${5:boolean force}})"]],
    "urlEncodedFormat": ["urlEncodedFormat(String [, charset])", ["(${1:String})", "(${1:string String}${2:, ${3:string charset}})"]],
    "urlSessionFormat": ["urlSessionFormat(requesturl)", ["(${1:requesturl})", "(${1:url requesturl})"]],
    "val": ["val(String)", ["(${1:String})", "(${1:string String})"]],
    "valueArray": ["valueArray(query, column)", ["(${1:query}, ${2:column})", "(${1:query query}, ${2:string column})"]],
    "valueList": ["valueList(column [, delimiter])", ["(${1:column})", "(${1:querycolumn column}${2:, ${3:string delimiter}})"]],
    "verifyClient": ["verifyClient()", ["()", "()"]],
    "webserviceNew": ["webserviceNew(url)", ["(${1:url})", "(${1:string url}${2:, ${3:struct arguments}})"]],
    "week": ["week(date)", ["(${1:date})", "(${1:date date})"]],
    "wrap": ["wrap(String, limit [, strip])", ["(${1:String}, ${2:limit})", "(${1:string String}, ${2:numeric limit}${3:, ${4:boolean strip}})"]],
    "writeBody": ["writeBody();", ["()", "()"]],
    "writeDump": ["writeDump(var [, output] [, format] [, abort] [, label] [, metainfo] [, top] [, show] [, hide] [, keys] [, expand] [, showUDFs])", ["(${1:var})", "(${1:variablename var}${2:, ${3:string output}}${4:, ${5:string format}}${6:, ${7:boolean abort}}${8:, ${9:string label}}${10:, ${11:boolean metainfo}}${12:, ${13:numeric top}}${14:, ${15:string show}}${16:, ${17:string hide}}${18:, ${19:numeric keys}}${20:, ${21:boolean expand}}${22:, ${23:boolean showUDfs}})"]],
    "writeLog": ["writeLog(text [, type] [, application] [, file] [, log] )", ["(${1:text})", "(${1:string text}${2:, ${3:string type}}${4:, ${5:boolean application}}${6:, ${7:string file}}${8:, ${9:string log}})"]],
    "writeOutput": ["writeOutput(string)", ["(${1:string})", "(${1:string string}${2:, ${3:string encodeFor}})"]],
    "wsGetAllChannels": ["wsGetAllChannels (); wsGetAllChannels('channelName');", ["(${1:channelName})", "(${1: channelName})"]],
    "wsGetSubscribers": ["wsGetSubscribers(channel);", ["(${1:channel})", "(${1: channel})"]],
    "wsPublish": ["wsPublish(String channel, Object message); wsPublish(channel,message [,filterCriteria]);", ["(${1:channel}, ${2:message})", "(${1: channel}, ${2: message}${3:, ${4: filterCriteria}})"]],
    "wsSendMessage": ["wsSendMessage(message);", ["(${1:message})", "(${1: message})"]],
    "xmlChildPos": ["xmlChildPos(elem, childname, n)", ["(${1:elem}, ${2:childname}, ${3:n})", "(${1:xml elem}, ${2:string childname}, ${3:numeric n})"]],
    "xmlElemNew": ["xmlElemNew(xmlobj [, namespace], childname)", ["(${1:xmlobj}, ${2:childname})", "(${1:xml xmlobj}${2:, ${3:string namespace}}, ${4:string childname})"]],
    "xmlFormat": ["xmlFormat(String [, escapeChars])", ["(${1:String})", "(${1:string String}${2:, ${3:boolean escapeChars}})"]],
    "xmlGetNodeType": ["xmlGetNodeType(xmlNode)", ["(${1:xmlNode})", "(${1:xml xmlNode})"]],
    "xmlNew": ["xmlNew([casesensitive])", ["(${1:casesensitive})", "(${1:boolean casesensitive})"]],
    "xmlParse": ["xmlParse(xmlString [, caseSensitive] [, validator])", ["(${1:xmlString})", "(${1:string xmlString}${2:, ${3:boolean caseSensitive}}${4:, ${5:string validator}})"]],
    "xmlSearch": ["xmlSearch(xmlNode, xpath [, params])", ["(${1:xmlNode}, ${2:xpath})", "(${1:xml xmlNode}, ${2:string xpath}${3:, ${4:struct params}})"]],
    "xmlTransform": ["xmlTransform(xml, xsl [, parameters])", ["(${1:xml}, ${2:xsl})", "(${1:xml xml}, ${2:string xsl}${3:, ${4:struct parameters}})"]],
    "xmlValidate": ["xmlValidate(xmlDoc [, validator])", ["(${1:xmlDoc})", "(${1:any xmlDoc}${2:, ${3:string validator}})"]],
    "year": ["year(date)", ["(${1:date})", "(${1:date date})"]],
    "yesNoFormat": ["yesNoFormat(value)", ["(${1:value})", "(${1:any value})"]]
}